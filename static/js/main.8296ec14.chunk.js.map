{"version":3,"sources":["constants/index.tsx","components/Link/styles.tsx","components/Link/Link.tsx","components/Navbar/styles.tsx","components/ScrollElementTracker/ScrollElementTracker.tsx","constants/config.tsx","components/About/styles.tsx","components/About/About.tsx","graphql/__generated__/index.tsx","components/Experiences/StylesProvider.tsx","graphql/typenames.tsx","graphql/data/uses.tsx","theme/index.tsx","components/utility/index.tsx","graphql/data/companies.tsx","graphql/data/languages.tsx","graphql/data/tools.tsx","graphql/data/experiences.tsx","graphql/data/skills.tsx","components/Experiences/History/History.tsx","components/Experiences/Timeline/styles.tsx","components/Experiences/Timeline/Timeline.tsx","components/Experiences/Experience/Experience.tsx","components/Experiences/Experiences.tsx","components/Experiences/styles.tsx","components/Experiences/index.tsx","components/Header/styles.tsx","components/Header/Header.tsx","components/Contacts/styles.tsx","components/Contacts/Contacts.tsx","components/Navbar/Navbar.tsx","graphql/__generated__/introspection-results.tsx","graphql/index.tsx","components/Skills/constants.tsx","components/Skills/styles.tsx","components/Skills/MeterRoot/styles.tsx","components/Skills/Skill/styles.tsx","icons/Search.tsx","components/Skills/StylesProvider.tsx","components/Skills/MeterRoot/MeterRoot.tsx","components/Skills/Skill/Skill.tsx","components/Skills/Skills.tsx","components/Skills/index.tsx","components/App/styles.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Anchors","makeStyles","palette","primary","white","common","root","position","content","left","bottom","transform","width","borderBottom","main","transition","textDecoration","root__active","root__white","color","borderBottomColor","Link","active","children","colorOverride","href","rel","target","props","classes","useStyles","className","clsx","spacing","marginBottom","from","maxHeight","padding","to","maxWidth","display","content__inViewPort","justifyContent","content__fixed","overflow","boxSizing","top","background","zIndex","content__fixedExpanded","animationName","animationDuration","animationFillMode","contentFixed_left","alignItems","contentFixed_right","item","margin","header","flexWrap","marginRight","animationDelay","header__expanded","DAY","id","providerListenerId","aboutListenerId","navbarListenerId","skillsListenerId","experiencesListenerId","context","createContext","Provider","scrollElementTrackerManager","scrollElementTrackerListenerMap","scrollElementTrackerListener","this","Object","entries","forEach","key","value","listener","hasChanges","values","element","onScreen","inViewPort","getBoundingClientRect","window","innerHeight","isElementInViewport","callListener","addEventListener","throttle","callListeners","useScrollElementTrackerRefCallback","addListener","useCallback","ScrollElementTracker","useState","setScrollElementTrackerListenerMap","useEffect","addWindowScrollListener","siteUrl","publicUrl","process","experienceAssetsDirectory","About","scrollElementTrackerRef","Grid","container","ref","xs","HistoryFieldsFragmentDoc","gql","ExperienceFieldsFragmentDoc","SkillValueFieldsFragmentDoc","SkillFieldsFragmentDoc","ExperiencesGetDocument","useExperiencesGetQuery","baseOptions","Apollo","SkillsGetDocument","WriteQueryDocument","useContext","typenames","Address","Company","Experience","History","Tool","Language","Use","SampleWork","Skill","createUse","use","__typename","toString","uses","Backend","title","Build","Frontend","None","args","createMuiTheme","primaryColor","secondaryColor","trinaryColor","languagesColor","theme","getColorByUse","getColorByType","displayedNode","parentDisplayedNodes","node","Array","isArray","useColorByType","displayNode","useMemo","createCompany","company","logo","purpose","url","companies","personal","address","state","county","name","pmat","lanternCredit","tableDesignArt","niksun","scholarsForCharity","createLanguage","language","languages","css","bash","javascript","java","golang","groovy","mysql","php","ruby","sass","typescript","createTool","tool","tools","angularJS","apollo","bootstrap","cesium","docker","foundation","gradle","graphql","graphqlJava","smartGwt","git","javaServlet","jspm","leaflet","liquid","illustrator","photoshop","react","redux","webpack","timeOff","experienceId","createExperience","experience","startDateStr","startDate","endDateStr","endDate","Date","days","getTime","hidden","index","jobType","role","sampleWorks","sampleWorkId","createSampleWork","sampleWork","thumbnail","caption","pmatCaption","createSampleWorkForPMAT","historyId","createHistory","history","reduce","previousValue","length","utilization","experiences","histories","accomplishments","description","image","computeUtilization","historyParent","historyParentDays","Error","childrenWithUtilization","filter","prev","isHistoryWithChildren","Boolean","computeSkillsFromHistory","onlyLanguages","skills","computedUtilization","parentIsOnlyLanguages","some","push","isOnlyUses","isOnlyTools","isOnlyLanguages","childrenHistory","computeSkillsFromExperiences","undefined","createSkill","skill","map","join","skillsMap","getCacheKey","skillInSkillMap","aggregateSkillUtilization","find","skillsLanguages","skillMap","skillsTools","sort","a","b","concat","historyParentUtilization","depth","utilizationRounded","Math","round","backgroundColor","stopPropagation","e","style","flexBasis","history_title","history_title__root","onClick","childHistory","component","vertex","border","height","edgeSizeHalf","vertex_overlay","extend","edge","edge_icon","borderRadius","edge_text","edgeSize","Timeline","data","isMostRecentExperience","isOldestExperience","startYearNum","getFullYear","endYearNum","numberOfYearsBetweenStartAndEndDatesWithPadding","timelineValues","i","year","renderDate","dateStr","date","getMonth","historyExpanded","setHistoryExpanded","handleHistoryRootClick","sampleWorksThumbnails","splice","sampleWorkDialogOpen","setSampleWorkDialogOpen","sampleWorkSelectedId","setSampleWorkSelectedId","handleSampleWorksToggle","experience_content","company_name","company_location","header_right","startEndDate","accomplishment","history__expanded","bind","sampleWork_image","src","alt","Dialog","open","onClose","DialogContent","findIndex","animation","autoPlay","carousel_image","Typography","variant","Experiences","history_titleTransitionDuration","history_titleTransitionFunction","history_titleTransition","history_titleFontSize","black","divider","flex","fontWeight","textAlign","history_title__expanded","fontSize","lineHeight","whiteSpace","history_title__frontend","history_title__backend","history_title__build","Index","sm","breakpoints","cursor","marginTop","header__navbar","marginLeft","header_name","header_name__last","header_name__small","Header","handleGridClick","contact","text","contact_link","contacts","icon","Email","Phone","GitHub","LinkedIn","Contacts","ButtonBase","Navbar","aboutListener","navbarListener","experiencesListener","skillsListener","Items","Skills","Container","result","possibleTypes","Node","Displayed","DisplayedNode","resolvers","Query","_","cache","readFragment","fragment","fragmentName","definitions","InMemoryCache","introspectionResults","client","ApolloClient","typeDefs","writeQuery","query","meterSkillTweenVars","paddingBottom","duration","ease","meterNodeTweenVars","meterEdgeTweenVars","autoCompleteTweenVars","usesFrontendIdentity","identify","usesBackendIdentity","usesBuildIdentity","toggleMap","Code","Web","Storage","toggleMapValues","skill_titleHeight","meter_rootSize","meter_rootIconSize","meter_rootExpanded","meter_nodeExpanded","meter_edgeExpanded","aggregator","borderColor","meter_edgeSize","skill_title__selected","meterRootContent__selected","meter_edge","meter_edgeVertical","autoComplete","autoComplete_inputRoot","filters","meter","meter_smallRoot","meter_root","meter_rootContent","flexShrink","meter_rootIcon","meter_rootIconFader","substring","shape","typography","grey","opacity","skill_title","minWidth","skill_title__meterRoot","meter_edgeVertical__lastChild","meter_node","meter_nodeToolTip","fade","fontFamily","pxToRem","wordWrap","fontWeightMedium","meter_nodeWrapper","meter_text","createSvgIcon","d","classesMeterRoot","classesSkill","classesSkills","useStylesShared","MeterRoot","printDateString","valueParam","type","floor","timeline","gsap","skillRef","meterRootContentElement","querySelector","meterEdgeVerticalElements","querySelectorAll","meterEdgeElements","meterNodeElements","skillTitleElement","borderWidth","meterEdgeElement","meterNodeElement","nodeCount","log","nodes","tooltipTitle","lastNode","getLogo","Filter","in","floodColor","in2","operator","k1","k2","k3","k4","selectedSkill","setSelectedSkill","handleAutoCompleteChange","event","toggles","setToggles","handleToggleButtonGroupOnChange","skillsFiltered","identity","showSearch","setShowSearch","paused","yoyo","searchRef","meterSkillElement","handleShowSearch","play","reverse","Search","selected","createElement","Autocomplete","inputRoot","options","getOptionLabel","renderInput","params","TextField","onChange","useStylesMeterRoot","useStylesSkill","useStylesSkills","body","code","anchor","scrollMarginTop","App","location","hostname","match","jss","create","plugins","jssPreset","compose","camelCase","defaultUnit","ReactDOM","render","StylesProvider","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8296ec14.chunk.js","sourcesContent":["export enum Anchors {\n  About = \"about\",\n  Skills = \"skills\",\n  Experience = \"experience\",\n}\n\nexport const DAY = 24 * 60 * 60 * 1000;\n\nlet id = 0;\nexport const providerListenerId = id++;\nexport const aboutListenerId = id++;\nexport const navbarListenerId = id++;\nexport const skillsListenerId = id++;\nexport const experiencesListenerId = id++;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nexport default makeStyles<Theme>(\n  ({\n    palette: {\n      primary,\n      common: { white },\n    },\n  }) => ({\n    root: {\n      position: \"relative\",\n      \"&::after\": {\n        content: \"''\",\n        position: \"absolute\",\n        left: \"50%\",\n        bottom: 0,\n        transform: \"translateX(-50%)\",\n        width: 0,\n        borderBottom: `1px solid ${primary.main}`,\n        transition: \"width 0.3s ease, border-color 0.3s ease\",\n      },\n      \"&:hover\": {\n        textDecoration: \"none\",\n        \"&::after\": {\n          width: \"100%\",\n        },\n      },\n    },\n    root__active: {\n      \"&::after\": {\n        width: \"100%\",\n      },\n    },\n    root__white: {\n      color: white,\n      \"&::after\": {\n        borderBottomColor: white,\n      },\n    },\n  }),\n);\n","import { Link as MaterialUILink, LinkProps } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { FC } from \"react\";\nimport useStyles from \"./styles\";\n\ntype Props = LinkProps & {\n  active?: boolean;\n  /**\n   * TODO: this prop is mainly used for the <Navbar> and needs to be revised\n   * to something like 'color: LinkProps[\"color\"] | \"white\"' but there issues\n   * with both merging and using string literals\n   */\n  colorOverride?: \"white\";\n};\n\nconst Link: FC<Props> = ({\n  active,\n  children,\n  colorOverride,\n  href,\n  rel = \"noreferrer\",\n  target = \"_blank\",\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      {href ? (\n        <MaterialUILink\n          className={clsx(\n            classes.root,\n            colorOverride === \"white\" && classes.root__white,\n            active && classes.root__active,\n          )}\n          href={href}\n          rel={rel}\n          target={target}\n          {...props}\n        >\n          {children}\n        </MaterialUILink>\n      ) : (\n        <span\n          className={clsx(colorOverride === \"white\" && classes.root__white)}\n          {...props}\n        >\n          {children}\n        </span>\n      )}\n    </>\n  );\n};\n\nexport default Link;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nexport const navbarHeight = 49;\n\nexport default makeStyles<Theme>(\n  ({\n    spacing,\n    palette: {\n      common: { white },\n    },\n    marginBottom,\n  }) => ({\n    \"@keyframes slideFromTop\": {\n      from: {\n        maxHeight: 0,\n        padding: spacing(0, 5, 0, 0),\n      },\n      to: {\n        maxHeight: navbarHeight,\n        // Right padding calculated from scrollbar (16px) and <Container>\n        // padding (24px)\n        padding: spacing(1, 5, 1, 0),\n      },\n    },\n    \"@keyframes slideFromLeft\": {\n      from: {\n        maxWidth: 0,\n      },\n      to: {\n        // TODO: consider alternative to hard coded width to handle animation,\n        // consider rendering a secondary component with visibility: none to\n        // determine width followed by using maxWidth: 100%\n        maxWidth: 150,\n      },\n    },\n\n    content: {\n      display: \"flex\",\n    },\n    content__inViewPort: {\n      justifyContent: \"center\",\n      marginBottom: marginBottom,\n    },\n    content__fixed: {\n      justifyContent: \"space-between\",\n      overflow: \"hidden\",\n      position: \"fixed\",\n      boxSizing: \"border-box\",\n      top: 0,\n      background: white,\n      zIndex: 1,\n      maxHeight: 0,\n    },\n    content__fixedExpanded: {\n      animationName: \"$slideFromTop\",\n      animationDuration: \".3s\",\n      animationFillMode: \"forwards\",\n    },\n\n    contentFixed_left: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    contentFixed_right: {\n      display: \"flex\",\n    },\n\n    item: {\n      margin: \"0 5px\",\n    },\n\n    header: {\n      \"&$header__expanded\": {\n        flexWrap: \"nowrap\",\n        justifyContent: \"initial\",\n        marginRight: spacing(1),\n        maxWidth: 0,\n        overflow: \"hidden\",\n        animationDelay: \".3s\",\n        animationDuration: \".3s\",\n        animationFillMode: \"forwards\",\n        animationName: \"$slideFromLeft\",\n      },\n    },\n    header__expanded: {},\n  }),\n);\n","import { throttle } from \"lodash\";\nimport React, {\n  createContext,\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { navbarHeight } from \"src/components/Navbar/styles\";\nimport {\n  aboutListenerId,\n  experiencesListenerId,\n  providerListenerId,\n  skillsListenerId,\n} from \"src/constants\";\nimport { RequiredByElsePartial } from \"src/types\";\n\ntype Listener = (\n  scrollElementTrackerListenerMap: ScrollElementTrackerListenerMap,\n) => void;\n\ntype ScrollElementTrackerListener = {\n  id: number;\n  element?: HTMLElement;\n  listener?: Listener;\n  inViewPort?: boolean;\n};\n\nexport type ScrollElementTrackerListenerMap = {\n  [key: number]: ScrollElementTrackerListener;\n};\n\nconst context = createContext<ScrollElementTrackerListenerMap>({});\n\nconst { Provider } = context;\n\n/**\n * Checks if any part of the given element is in the viewport\n * From:\n * https://stackoverflow.com/questions/487073/how-to-check-if-element-is-visible-after-scrolling#comment45659737_22480938\n * @param element\n */\nfunction isElementInViewport(element: HTMLElement) {\n  const { top, bottom } = element.getBoundingClientRect();\n  return top < window.innerHeight && bottom >= navbarHeight;\n}\n\nclass ScrollManager {\n  scrollElementTrackerListenerMap: ScrollElementTrackerListenerMap = {};\n\n  addListener(\n    scrollElementTrackerListener: RequiredByElsePartial<\n      ScrollElementTrackerListener,\n      \"id\"\n    >,\n  ) {\n    const { id } = scrollElementTrackerListener;\n\n    if (!this.scrollElementTrackerListenerMap[id]) {\n      this.scrollElementTrackerListenerMap[id] = {\n        ...scrollElementTrackerListener,\n      };\n    }\n\n    Object.entries(scrollElementTrackerListener).forEach(([key, value]) => {\n      // @ts-ignore\n      this.scrollElementTrackerListenerMap[id][key] = value;\n    });\n  }\n\n  callListener(id: ScrollElementTrackerListener[\"id\"]) {\n    const { listener } = this.scrollElementTrackerListenerMap[id];\n    if (listener) {\n      listener(this.scrollElementTrackerListenerMap);\n    }\n  }\n\n  callListeners() {\n    let hasChanges = false;\n    Object.values(this.scrollElementTrackerListenerMap).forEach(\n      (scrollElementTrackerListener) => {\n        const { element } = scrollElementTrackerListener;\n\n        let onScreen = scrollElementTrackerListener.inViewPort;\n        if (element) {\n          onScreen = isElementInViewport(element);\n        }\n\n        if (onScreen !== scrollElementTrackerListener.inViewPort) {\n          scrollElementTrackerListener.inViewPort = onScreen;\n          hasChanges = true;\n        }\n      },\n    );\n\n    if (hasChanges) {\n      Object.values(this.scrollElementTrackerListenerMap).forEach(({ id }) =>\n        this.callListener(id),\n      );\n    }\n  }\n\n  addWindowScrollListener() {\n    window.addEventListener(\n      \"scroll\",\n      throttle(\n        () => this.callListeners(),\n        // 30 FPS\n        1000 / 30,\n      ),\n    );\n  }\n}\n\nexport const scrollElementTrackerManager = new ScrollManager();\nscrollElementTrackerManager.addListener({ id: skillsListenerId });\nscrollElementTrackerManager.addListener({ id: experiencesListenerId });\nscrollElementTrackerManager.addListener({ id: aboutListenerId });\n\nexport function useScrollElementTrackerRefCallback(\n  id: ScrollElementTrackerListener[\"id\"],\n) {\n  scrollElementTrackerManager.addListener({ id });\n\n  return useCallback(\n    (element: HTMLDivElement) => {\n      if (!element) {\n        return;\n      }\n      scrollElementTrackerManager.addListener({ id, element });\n    },\n    [id],\n  );\n}\n\nexport function useScrollElementTracker() {\n  return useContext(context);\n}\n\nexport type ScrollElementTrackerProps = {\n  scrollElementTrackerRef: ReturnType<\n    typeof useScrollElementTrackerRefCallback\n  >;\n};\n\nexport function withScrollElementTracker<T extends ScrollElementTrackerProps>(\n  Component: FC<T>,\n  id: number,\n) {\n  const Wrapper: FC<Omit<T, \"scrollElementTrackerRef\">> = (props) => {\n    scrollElementTrackerManager.addListener({ id });\n    const ref = useScrollElementTrackerRefCallback(id);\n\n    // Typecasting used as generic type cannot be determined see\n    // https://stackoverflow.com/a/60735856\n    return <Component {...(props as T)} scrollElementTrackerRef={ref} />;\n  };\n  return Wrapper;\n}\n\nconst ScrollElementTracker: FC = ({ children }) => {\n  const [\n    scrollElementTrackerListenerMap,\n    setScrollElementTrackerListenerMap,\n  ] = useState<ScrollElementTrackerListenerMap>(\n    scrollElementTrackerManager.scrollElementTrackerListenerMap,\n  );\n\n  useEffect(() => {\n    scrollElementTrackerManager.addWindowScrollListener();\n    scrollElementTrackerManager.addListener({\n      id: providerListenerId,\n      listener: (scrollElementTrackerListenerMap) => {\n        setScrollElementTrackerListenerMap({\n          ...scrollElementTrackerListenerMap,\n        });\n      },\n    });\n    scrollElementTrackerManager.callListeners();\n  }, []);\n\n  return (\n    <Provider value={scrollElementTrackerListenerMap}>{children}</Provider>\n  );\n};\n\nexport default ScrollElementTracker;\n","// TODO (ksuen): consider setting and using PUBLIC_URL\nexport const siteUrl = \"//ksrb.github.io\";\n\nexport const publicUrl = process.env.PUBLIC_URL;\nexport const experienceAssetsDirectory = `${publicUrl}/assets/experiences`;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nexport default makeStyles<Theme>(({ marginBottom }) => ({\n  root: {\n    marginBottom: marginBottom,\n  },\n}));\n","import { Grid } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport Link from \"src/components/Link\";\nimport { useScrollElementTrackerRefCallback } from \"src/components/ScrollElementTracker\";\nimport { aboutListenerId } from \"src/constants\";\nimport { siteUrl } from \"src/constants/config\";\nimport useStyles from \"./styles\";\n\nconst About: FC = () => {\n  const scrollElementTrackerRef = useScrollElementTrackerRefCallback(\n    aboutListenerId,\n  );\n\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root} ref={scrollElementTrackerRef}>\n      <Grid item xs={12}>\n        <p>\n          Thanks for visiting my site, this very much still a work in progress\n          but I hope you find what's here interesting.\n        </p>\n\n        <p>\n          The design of this site is meant to pay homage to GraphQL and GraphQL\n          clients like ApolloJS and Relay, technologies which I think are\n          leading the way to better developer and user experiences.\n        </p>\n\n        <p>\n          A legacy site is available{\" \"}\n          <Link href={`${siteUrl}/legacy`}>here</Link>.\n        </p>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default About;\n","import { GraphQLResolveInfo } from \"graphql\";\nimport { ApolloClientContext } from \"src/graphql/types\";\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\nexport type RequireFields<T, K extends keyof T> = {\n  [X in Exclude<keyof T, K>]?: T[X];\n} &\n  { [P in K]-?: NonNullable<T[P]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Address = {\n  __typename?: \"Address\";\n  county: Scalars[\"String\"];\n  state: Scalars[\"String\"];\n};\n\nexport type Node = {\n  id: Scalars[\"ID\"];\n};\n\nexport type Company = Node & {\n  __typename?: \"Company\";\n  id: Scalars[\"ID\"];\n  address: Address;\n  logo: Scalars[\"String\"];\n  name: Scalars[\"String\"];\n  purpose: Scalars[\"String\"];\n  url: Scalars[\"String\"];\n};\n\nexport type Displayed = {\n  title: Scalars[\"String\"];\n};\n\nexport type Use = Displayed &\n  Node & {\n    __typename?: \"Use\";\n    id: Scalars[\"ID\"];\n    title: Scalars[\"String\"];\n  };\n\nexport type Language = Displayed &\n  Node & {\n    __typename?: \"Language\";\n    id: Scalars[\"ID\"];\n    title: Scalars[\"String\"];\n    url: Scalars[\"String\"];\n    logo: Scalars[\"String\"];\n  };\n\nexport type Tool = Displayed &\n  Node & {\n    __typename?: \"Tool\";\n    id: Scalars[\"ID\"];\n    languages?: Maybe<Array<Language>>;\n    logo: Scalars[\"String\"];\n    title: Scalars[\"String\"];\n    url: Scalars[\"String\"];\n    use: Use;\n  };\n\nexport type History = Node & {\n  __typename?: \"History\";\n  id: Scalars[\"ID\"];\n  children?: Maybe<Array<History>>;\n  utilization?: Maybe<Scalars[\"Int\"]>;\n  title: Scalars[\"String\"];\n  values: Array<Displayed>;\n};\n\nexport type Experience = Node & {\n  __typename?: \"Experience\";\n  id: Scalars[\"ID\"];\n  accomplishments: Array<Scalars[\"String\"]>;\n  company: Company;\n  days: Scalars[\"Int\"];\n  endDate?: Maybe<Scalars[\"String\"]>;\n  hidden: Scalars[\"Boolean\"];\n  histories: Array<History>;\n  jobType: Scalars[\"String\"];\n  index: Scalars[\"Int\"];\n  role: Scalars[\"String\"];\n  startDate: Scalars[\"String\"];\n  sampleWorks: Array<SampleWork>;\n};\n\nexport type SampleWork = Node & {\n  __typename?: \"SampleWork\";\n  id: Scalars[\"ID\"];\n  image: Scalars[\"String\"];\n  description: Scalars[\"String\"];\n  caption: Scalars[\"String\"];\n  thumbnail: Scalars[\"Boolean\"];\n};\n\nexport type Skill = Node & {\n  __typename?: \"Skill\";\n  id: Scalars[\"ID\"];\n  experience: Experience;\n  languages?: Maybe<Array<Language>>;\n  title: Scalars[\"String\"];\n  utilization: Scalars[\"Int\"];\n  value: Displayed;\n  values: Array<Displayed>;\n};\n\nexport type DisplayedNode = Tool | Language | Use;\n\nexport type Query = {\n  __typename?: \"Query\";\n  experiences: Array<Experience>;\n  experience?: Maybe<Experience>;\n  skills: Array<Skill>;\n  skill?: Maybe<Skill>;\n};\n\nexport type QueryExperienceArgs = {\n  id: Scalars[\"ID\"];\n};\n\nexport type QuerySkillArgs = {\n  id: Scalars[\"ID\"];\n};\n\nexport type HistoryFieldsFragment = { __typename?: \"History\" } & Pick<\n  History,\n  \"id\" | \"title\" | \"utilization\"\n> & {\n    values: Array<\n      | ({ __typename?: \"Use\" } & Pick<Use, \"id\" | \"title\">)\n      | ({ __typename?: \"Language\" } & Pick<Language, \"id\" | \"title\" | \"url\">)\n      | ({ __typename?: \"Tool\" } & Pick<Tool, \"id\" | \"title\" | \"url\"> & {\n            languages?: Maybe<\n              Array<{ __typename?: \"Language\" } & Pick<Language, \"id\">>\n            >;\n            use: { __typename?: \"Use\" } & Pick<Use, \"id\">;\n          })\n    >;\n  };\n\nexport type ExperienceFieldsFragment = { __typename?: \"Experience\" } & Pick<\n  Experience,\n  | \"id\"\n  | \"accomplishments\"\n  | \"days\"\n  | \"endDate\"\n  | \"hidden\"\n  | \"index\"\n  | \"role\"\n  | \"startDate\"\n> & {\n    company: { __typename?: \"Company\" } & Pick<\n      Company,\n      \"id\" | \"name\" | \"purpose\" | \"url\"\n    > & {\n        address: { __typename?: \"Address\" } & Pick<Address, \"county\" | \"state\">;\n      };\n    histories: Array<\n      { __typename?: \"History\" } & {\n        children?: Maybe<\n          Array<\n            { __typename?: \"History\" } & {\n              children?: Maybe<\n                Array<\n                  { __typename?: \"History\" } & {\n                    children?: Maybe<\n                      Array<{ __typename?: \"History\" } & HistoryFieldsFragment>\n                    >;\n                  } & HistoryFieldsFragment\n                >\n              >;\n            } & HistoryFieldsFragment\n          >\n        >;\n      } & HistoryFieldsFragment\n    >;\n    sampleWorks: Array<\n      { __typename?: \"SampleWork\" } & Pick<\n        SampleWork,\n        \"id\" | \"caption\" | \"description\" | \"image\" | \"thumbnail\"\n      >\n    >;\n  };\n\nexport type ExperiencesGetQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type ExperiencesGetQuery = { __typename?: \"Query\" } & {\n  experiences: Array<{ __typename?: \"Experience\" } & ExperienceFieldsFragment>;\n};\n\nexport type ExperienceGetQueryVariables = Exact<{\n  id: Scalars[\"ID\"];\n}>;\n\nexport type ExperienceGetQuery = { __typename?: \"Query\" } & {\n  experience?: Maybe<{ __typename?: \"Experience\" } & ExperienceFieldsFragment>;\n};\n\ntype SkillValueFields_Tool_Fragment = { __typename?: \"Tool\" } & Pick<\n  Tool,\n  \"id\" | \"logo\" | \"title\" | \"url\"\n> & { use: { __typename?: \"Use\" } & Pick<Use, \"id\"> };\n\ntype SkillValueFields_Language_Fragment = { __typename?: \"Language\" } & Pick<\n  Language,\n  \"id\" | \"title\" | \"logo\" | \"url\"\n>;\n\ntype SkillValueFields_Use_Fragment = { __typename?: \"Use\" } & Pick<\n  Use,\n  \"id\" | \"title\"\n>;\n\nexport type SkillValueFieldsFragment =\n  | SkillValueFields_Tool_Fragment\n  | SkillValueFields_Language_Fragment\n  | SkillValueFields_Use_Fragment;\n\nexport type SkillFieldsFragment = { __typename?: \"Skill\" } & Pick<\n  Skill,\n  \"id\" | \"title\" | \"utilization\"\n> & {\n    experience: { __typename?: \"Experience\" } & Pick<Experience, \"id\"> & {\n        company: { __typename?: \"Company\" } & Pick<Company, \"id\" | \"name\">;\n      };\n    languages?: Maybe<\n      Array<\n        { __typename?: \"Language\" } & Pick<Language, \"id\" | \"title\" | \"logo\">\n      >\n    >;\n    value:\n      | ({ __typename?: \"Use\" } & SkillValueFields_Use_Fragment)\n      | ({ __typename?: \"Language\" } & SkillValueFields_Language_Fragment)\n      | ({ __typename?: \"Tool\" } & SkillValueFields_Tool_Fragment);\n    values: Array<\n      | ({ __typename?: \"Use\" } & SkillValueFields_Use_Fragment)\n      | ({ __typename?: \"Language\" } & SkillValueFields_Language_Fragment)\n      | ({ __typename?: \"Tool\" } & SkillValueFields_Tool_Fragment)\n    >;\n  };\n\nexport type SkillsGetQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type SkillsGetQuery = { __typename?: \"Query\" } & {\n  skills: Array<{ __typename?: \"Skill\" } & SkillFieldsFragment>;\n};\n\nexport type SkillGetQueryVariables = Exact<{\n  id: Scalars[\"ID\"];\n}>;\n\nexport type SkillGetQuery = { __typename?: \"Query\" } & {\n  skill?: Maybe<{ __typename?: \"Skill\" } & SkillFieldsFragment>;\n};\n\nexport type WriteQueryQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WriteQueryQuery = { __typename?: \"Query\" } & {\n  experiences: Array<{ __typename?: \"Experience\" } & ExperienceFieldsFragment>;\n  skills: Array<{ __typename?: \"Skill\" } & SkillFieldsFragment>;\n};\n\nexport const HistoryFieldsFragmentDoc = gql`\n  fragment HistoryFields on History {\n    id\n    title\n    utilization\n    values {\n      ... on Tool {\n        id\n        languages {\n          id\n        }\n        title\n        url\n        use {\n          id\n        }\n      }\n      ... on Language {\n        id\n        title\n        url\n      }\n      ... on Use {\n        id\n        title\n      }\n    }\n  }\n`;\nexport const ExperienceFieldsFragmentDoc = gql`\n  fragment ExperienceFields on Experience {\n    id\n    accomplishments\n    company {\n      id\n      address {\n        county\n        state\n      }\n      name\n      purpose\n      url\n    }\n    days\n    histories {\n      ...HistoryFields\n      children {\n        ...HistoryFields\n        children {\n          ...HistoryFields\n          children {\n            ...HistoryFields\n          }\n        }\n      }\n    }\n    endDate\n    hidden\n    index\n    role\n    startDate\n    sampleWorks {\n      id\n      caption\n      description\n      image\n      thumbnail\n    }\n  }\n  ${HistoryFieldsFragmentDoc}\n`;\nexport const SkillValueFieldsFragmentDoc = gql`\n  fragment SkillValueFields on DisplayedNode {\n    ... on Tool {\n      id\n      logo\n      title\n      url\n      use {\n        id\n      }\n    }\n    ... on Language {\n      id\n      title\n      logo\n      url\n    }\n    ... on Use {\n      id\n      title\n    }\n  }\n`;\nexport const SkillFieldsFragmentDoc = gql`\n  fragment SkillFields on Skill {\n    id\n    title\n    experience {\n      id\n      company {\n        id\n        name\n      }\n    }\n    languages {\n      id\n      title\n      logo\n    }\n    utilization\n    value {\n      ...SkillValueFields\n    }\n    values {\n      ...SkillValueFields\n    }\n  }\n  ${SkillValueFieldsFragmentDoc}\n`;\nexport const ExperiencesGetDocument = gql`\n  query ExperiencesGet {\n    experiences {\n      ...ExperienceFields\n    }\n  }\n  ${ExperienceFieldsFragmentDoc}\n`;\n\n/**\n * __useExperiencesGetQuery__\n *\n * To run a query within a React component, call `useExperiencesGetQuery` and pass it any options that fit your needs.\n * When your component renders, `useExperiencesGetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExperiencesGetQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useExperiencesGetQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    ExperiencesGetQuery,\n    ExperiencesGetQueryVariables\n  >,\n) {\n  return Apollo.useQuery<ExperiencesGetQuery, ExperiencesGetQueryVariables>(\n    ExperiencesGetDocument,\n    baseOptions,\n  );\n}\nexport function useExperiencesGetLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ExperiencesGetQuery,\n    ExperiencesGetQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<ExperiencesGetQuery, ExperiencesGetQueryVariables>(\n    ExperiencesGetDocument,\n    baseOptions,\n  );\n}\nexport type ExperiencesGetQueryHookResult = ReturnType<\n  typeof useExperiencesGetQuery\n>;\nexport type ExperiencesGetLazyQueryHookResult = ReturnType<\n  typeof useExperiencesGetLazyQuery\n>;\nexport type ExperiencesGetQueryResult = Apollo.QueryResult<\n  ExperiencesGetQuery,\n  ExperiencesGetQueryVariables\n>;\nexport const ExperienceGetDocument = gql`\n  query ExperienceGet($id: ID!) {\n    experience(id: $id) @client {\n      ...ExperienceFields\n    }\n  }\n  ${ExperienceFieldsFragmentDoc}\n`;\n\n/**\n * __useExperienceGetQuery__\n *\n * To run a query within a React component, call `useExperienceGetQuery` and pass it any options that fit your needs.\n * When your component renders, `useExperienceGetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useExperienceGetQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useExperienceGetQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    ExperienceGetQuery,\n    ExperienceGetQueryVariables\n  >,\n) {\n  return Apollo.useQuery<ExperienceGetQuery, ExperienceGetQueryVariables>(\n    ExperienceGetDocument,\n    baseOptions,\n  );\n}\nexport function useExperienceGetLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    ExperienceGetQuery,\n    ExperienceGetQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<ExperienceGetQuery, ExperienceGetQueryVariables>(\n    ExperienceGetDocument,\n    baseOptions,\n  );\n}\nexport type ExperienceGetQueryHookResult = ReturnType<\n  typeof useExperienceGetQuery\n>;\nexport type ExperienceGetLazyQueryHookResult = ReturnType<\n  typeof useExperienceGetLazyQuery\n>;\nexport type ExperienceGetQueryResult = Apollo.QueryResult<\n  ExperienceGetQuery,\n  ExperienceGetQueryVariables\n>;\nexport const SkillsGetDocument = gql`\n  query SkillsGet {\n    skills {\n      ...SkillFields\n    }\n  }\n  ${SkillFieldsFragmentDoc}\n`;\n\n/**\n * __useSkillsGetQuery__\n *\n * To run a query within a React component, call `useSkillsGetQuery` and pass it any options that fit your needs.\n * When your component renders, `useSkillsGetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSkillsGetQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSkillsGetQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    SkillsGetQuery,\n    SkillsGetQueryVariables\n  >,\n) {\n  return Apollo.useQuery<SkillsGetQuery, SkillsGetQueryVariables>(\n    SkillsGetDocument,\n    baseOptions,\n  );\n}\nexport function useSkillsGetLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SkillsGetQuery,\n    SkillsGetQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SkillsGetQuery, SkillsGetQueryVariables>(\n    SkillsGetDocument,\n    baseOptions,\n  );\n}\nexport type SkillsGetQueryHookResult = ReturnType<typeof useSkillsGetQuery>;\nexport type SkillsGetLazyQueryHookResult = ReturnType<\n  typeof useSkillsGetLazyQuery\n>;\nexport type SkillsGetQueryResult = Apollo.QueryResult<\n  SkillsGetQuery,\n  SkillsGetQueryVariables\n>;\nexport const SkillGetDocument = gql`\n  query SkillGet($id: ID!) {\n    skill(id: $id) @client {\n      ...SkillFields\n    }\n  }\n  ${SkillFieldsFragmentDoc}\n`;\n\n/**\n * __useSkillGetQuery__\n *\n * To run a query within a React component, call `useSkillGetQuery` and pass it any options that fit your needs.\n * When your component renders, `useSkillGetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSkillGetQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSkillGetQuery(\n  baseOptions: Apollo.QueryHookOptions<SkillGetQuery, SkillGetQueryVariables>,\n) {\n  return Apollo.useQuery<SkillGetQuery, SkillGetQueryVariables>(\n    SkillGetDocument,\n    baseOptions,\n  );\n}\nexport function useSkillGetLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    SkillGetQuery,\n    SkillGetQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<SkillGetQuery, SkillGetQueryVariables>(\n    SkillGetDocument,\n    baseOptions,\n  );\n}\nexport type SkillGetQueryHookResult = ReturnType<typeof useSkillGetQuery>;\nexport type SkillGetLazyQueryHookResult = ReturnType<\n  typeof useSkillGetLazyQuery\n>;\nexport type SkillGetQueryResult = Apollo.QueryResult<\n  SkillGetQuery,\n  SkillGetQueryVariables\n>;\nexport const WriteQueryDocument = gql`\n  query WriteQuery {\n    experiences {\n      ...ExperienceFields\n    }\n    skills {\n      ...SkillFields\n    }\n  }\n  ${ExperienceFieldsFragmentDoc}\n  ${SkillFieldsFragmentDoc}\n`;\n\n/**\n * __useWriteQueryQuery__\n *\n * To run a query within a React component, call `useWriteQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useWriteQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWriteQueryQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWriteQueryQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    WriteQueryQuery,\n    WriteQueryQueryVariables\n  >,\n) {\n  return Apollo.useQuery<WriteQueryQuery, WriteQueryQueryVariables>(\n    WriteQueryDocument,\n    baseOptions,\n  );\n}\nexport function useWriteQueryLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WriteQueryQuery,\n    WriteQueryQueryVariables\n  >,\n) {\n  return Apollo.useLazyQuery<WriteQueryQuery, WriteQueryQueryVariables>(\n    WriteQueryDocument,\n    baseOptions,\n  );\n}\nexport type WriteQueryQueryHookResult = ReturnType<typeof useWriteQueryQuery>;\nexport type WriteQueryLazyQueryHookResult = ReturnType<\n  typeof useWriteQueryLazyQuery\n>;\nexport type WriteQueryQueryResult = Apollo.QueryResult<\n  WriteQueryQuery,\n  WriteQueryQueryVariables\n>;\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> =\n  | LegacyStitchingResolver<TResult, TParent, TContext, TArgs>\n  | NewStitchingResolver<TResult, TParent, TContext, TArgs>;\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<\n  TResult,\n  TKey extends string,\n  TParent,\n  TContext,\n  TArgs\n> {\n  subscribe: SubscriptionSubscribeFn<\n    { [key in TKey]: TResult },\n    TParent,\n    TContext,\n    TArgs\n  >;\n  resolve?: SubscriptionResolveFn<\n    TResult,\n    { [key in TKey]: TResult },\n    TContext,\n    TArgs\n  >;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<\n  TResult,\n  TKey extends string,\n  TParent,\n  TContext,\n  TArgs\n> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<\n  TResult,\n  TKey extends string,\n  TParent = {},\n  TContext = {},\n  TArgs = {}\n> =\n  | ((\n      ...args: any[]\n    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (\n  obj: T,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<\n  TResult = {},\n  TParent = {},\n  TContext = {},\n  TArgs = {}\n> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => TResult | Promise<TResult>;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n  Address: ResolverTypeWrapper<Address>;\n  String: ResolverTypeWrapper<Scalars[\"String\"]>;\n  Node:\n    | ResolversTypes[\"Company\"]\n    | ResolversTypes[\"Use\"]\n    | ResolversTypes[\"Language\"]\n    | ResolversTypes[\"Tool\"]\n    | ResolversTypes[\"History\"]\n    | ResolversTypes[\"Experience\"]\n    | ResolversTypes[\"SampleWork\"]\n    | ResolversTypes[\"Skill\"];\n  ID: ResolverTypeWrapper<Scalars[\"ID\"]>;\n  Company: ResolverTypeWrapper<Company>;\n  Displayed:\n    | ResolversTypes[\"Use\"]\n    | ResolversTypes[\"Language\"]\n    | ResolversTypes[\"Tool\"];\n  Use: ResolverTypeWrapper<Use>;\n  Language: ResolverTypeWrapper<Language>;\n  Tool: ResolverTypeWrapper<Tool>;\n  History: ResolverTypeWrapper<History>;\n  Int: ResolverTypeWrapper<Scalars[\"Int\"]>;\n  Experience: ResolverTypeWrapper<Experience>;\n  Boolean: ResolverTypeWrapper<Scalars[\"Boolean\"]>;\n  SampleWork: ResolverTypeWrapper<SampleWork>;\n  Skill: ResolverTypeWrapper<Skill>;\n  DisplayedNode:\n    | ResolversTypes[\"Tool\"]\n    | ResolversTypes[\"Language\"]\n    | ResolversTypes[\"Use\"];\n  Query: ResolverTypeWrapper<{}>;\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n  Address: Address;\n  String: Scalars[\"String\"];\n  Node:\n    | ResolversParentTypes[\"Company\"]\n    | ResolversParentTypes[\"Use\"]\n    | ResolversParentTypes[\"Language\"]\n    | ResolversParentTypes[\"Tool\"]\n    | ResolversParentTypes[\"History\"]\n    | ResolversParentTypes[\"Experience\"]\n    | ResolversParentTypes[\"SampleWork\"]\n    | ResolversParentTypes[\"Skill\"];\n  ID: Scalars[\"ID\"];\n  Company: Company;\n  Displayed:\n    | ResolversParentTypes[\"Use\"]\n    | ResolversParentTypes[\"Language\"]\n    | ResolversParentTypes[\"Tool\"];\n  Use: Use;\n  Language: Language;\n  Tool: Tool;\n  History: History;\n  Int: Scalars[\"Int\"];\n  Experience: Experience;\n  Boolean: Scalars[\"Boolean\"];\n  SampleWork: SampleWork;\n  Skill: Skill;\n  DisplayedNode:\n    | ResolversParentTypes[\"Tool\"]\n    | ResolversParentTypes[\"Language\"]\n    | ResolversParentTypes[\"Use\"];\n  Query: {};\n};\n\nexport type AddressResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Address\"] = ResolversParentTypes[\"Address\"]\n> = {\n  county: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  state: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type NodeResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Node\"] = ResolversParentTypes[\"Node\"]\n> = {\n  __resolveType: TypeResolveFn<\n    | \"Company\"\n    | \"Use\"\n    | \"Language\"\n    | \"Tool\"\n    | \"History\"\n    | \"Experience\"\n    | \"SampleWork\"\n    | \"Skill\",\n    ParentType,\n    ContextType\n  >;\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n};\n\nexport type CompanyResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Company\"] = ResolversParentTypes[\"Company\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  address: Resolver<ResolversTypes[\"Address\"], ParentType, ContextType>;\n  logo: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  name: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  purpose: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  url: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type DisplayedResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Displayed\"] = ResolversParentTypes[\"Displayed\"]\n> = {\n  __resolveType: TypeResolveFn<\n    \"Use\" | \"Language\" | \"Tool\",\n    ParentType,\n    ContextType\n  >;\n  title: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n};\n\nexport type UseResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Use\"] = ResolversParentTypes[\"Use\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  title: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type LanguageResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Language\"] = ResolversParentTypes[\"Language\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  title: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  url: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  logo: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type ToolResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Tool\"] = ResolversParentTypes[\"Tool\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  languages: Resolver<\n    Maybe<Array<ResolversTypes[\"Language\"]>>,\n    ParentType,\n    ContextType\n  >;\n  logo: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  title: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  url: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  use: Resolver<ResolversTypes[\"Use\"], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type HistoryResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"History\"] = ResolversParentTypes[\"History\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  children: Resolver<\n    Maybe<Array<ResolversTypes[\"History\"]>>,\n    ParentType,\n    ContextType\n  >;\n  utilization: Resolver<Maybe<ResolversTypes[\"Int\"]>, ParentType, ContextType>;\n  title: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  values: Resolver<Array<ResolversTypes[\"Displayed\"]>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type ExperienceResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Experience\"] = ResolversParentTypes[\"Experience\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  accomplishments: Resolver<\n    Array<ResolversTypes[\"String\"]>,\n    ParentType,\n    ContextType\n  >;\n  company: Resolver<ResolversTypes[\"Company\"], ParentType, ContextType>;\n  days: Resolver<ResolversTypes[\"Int\"], ParentType, ContextType>;\n  endDate: Resolver<Maybe<ResolversTypes[\"String\"]>, ParentType, ContextType>;\n  hidden: Resolver<ResolversTypes[\"Boolean\"], ParentType, ContextType>;\n  histories: Resolver<\n    Array<ResolversTypes[\"History\"]>,\n    ParentType,\n    ContextType\n  >;\n  jobType: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  index: Resolver<ResolversTypes[\"Int\"], ParentType, ContextType>;\n  role: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  startDate: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  sampleWorks: Resolver<\n    Array<ResolversTypes[\"SampleWork\"]>,\n    ParentType,\n    ContextType\n  >;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type SampleWorkResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"SampleWork\"] = ResolversParentTypes[\"SampleWork\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  image: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  description: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  caption: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  thumbnail: Resolver<ResolversTypes[\"Boolean\"], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type SkillResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Skill\"] = ResolversParentTypes[\"Skill\"]\n> = {\n  id: Resolver<ResolversTypes[\"ID\"], ParentType, ContextType>;\n  experience: Resolver<ResolversTypes[\"Experience\"], ParentType, ContextType>;\n  languages: Resolver<\n    Maybe<Array<ResolversTypes[\"Language\"]>>,\n    ParentType,\n    ContextType\n  >;\n  title: Resolver<ResolversTypes[\"String\"], ParentType, ContextType>;\n  utilization: Resolver<ResolversTypes[\"Int\"], ParentType, ContextType>;\n  value: Resolver<ResolversTypes[\"Displayed\"], ParentType, ContextType>;\n  values: Resolver<Array<ResolversTypes[\"Displayed\"]>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type DisplayedNodeResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"DisplayedNode\"] = ResolversParentTypes[\"DisplayedNode\"]\n> = {\n  __resolveType: TypeResolveFn<\n    \"Tool\" | \"Language\" | \"Use\",\n    ParentType,\n    ContextType\n  >;\n};\n\nexport type QueryResolvers<\n  ContextType = ApolloClientContext,\n  ParentType extends ResolversParentTypes[\"Query\"] = ResolversParentTypes[\"Query\"]\n> = {\n  experiences: Resolver<\n    Array<ResolversTypes[\"Experience\"]>,\n    ParentType,\n    ContextType\n  >;\n  experience: Resolver<\n    Maybe<ResolversTypes[\"Experience\"]>,\n    ParentType,\n    ContextType,\n    RequireFields<QueryExperienceArgs, \"id\">\n  >;\n  skills: Resolver<Array<ResolversTypes[\"Skill\"]>, ParentType, ContextType>;\n  skill: Resolver<\n    Maybe<ResolversTypes[\"Skill\"]>,\n    ParentType,\n    ContextType,\n    RequireFields<QuerySkillArgs, \"id\">\n  >;\n};\n\nexport type Resolvers<ContextType = ApolloClientContext> = {\n  Address: AddressResolvers<ContextType>;\n  Node: NodeResolvers<ContextType>;\n  Company: CompanyResolvers<ContextType>;\n  Displayed: DisplayedResolvers<ContextType>;\n  Use: UseResolvers<ContextType>;\n  Language: LanguageResolvers<ContextType>;\n  Tool: ToolResolvers<ContextType>;\n  History: HistoryResolvers<ContextType>;\n  Experience: ExperienceResolvers<ContextType>;\n  SampleWork: SampleWorkResolvers<ContextType>;\n  Skill: SkillResolvers<ContextType>;\n  DisplayedNode: DisplayedNodeResolvers<ContextType>;\n  Query: QueryResolvers<ContextType>;\n};\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers<\n  ContextType = ApolloClientContext\n> = Resolvers<ContextType>;\n","import React, { createContext, useContext } from \"react\";\nimport useStylesRoot from \"./styles\";\n\nconst context = createContext<ReturnType<typeof useStylesRoot>>({});\n\nexport const { Provider } = context;\n\nexport function useStyles() {\n  return useContext(context);\n}\n","import {\n  Address,\n  Company,\n  Experience,\n  History,\n  Language,\n  SampleWork,\n  Skill,\n  Tool,\n  Use,\n} from \"./__generated__\";\n\ninterface Typenames {\n  Address: NonNullable<Address[\"__typename\"]>;\n  Company: NonNullable<Company[\"__typename\"]>;\n  Experience: NonNullable<Experience[\"__typename\"]>;\n  History: NonNullable<History[\"__typename\"]>;\n  Tool: NonNullable<Tool[\"__typename\"]>;\n  Language: NonNullable<Language[\"__typename\"]>;\n  Use: NonNullable<Use[\"__typename\"]>;\n  SampleWork: NonNullable<SampleWork[\"__typename\"]>;\n  Skill: NonNullable<Skill[\"__typename\"]>;\n}\n\nconst typenames: Typenames = {\n  Address: \"Address\",\n  Company: \"Company\",\n  Experience: \"Experience\",\n  History: \"History\",\n  Tool: \"Tool\",\n  Language: \"Language\",\n  Use: \"Use\",\n  SampleWork: \"SampleWork\",\n  Skill: \"Skill\",\n};\n\nexport default typenames;\n","import typenames from \"src/graphql/typenames\";\nimport { Use } from \"src/graphql/__generated__\";\n\nimport { RequiredByElsePartial } from \"src/types\";\n\nlet id = 0;\nfunction createUse(use: RequiredByElsePartial<Use, \"title\">): Use {\n  return {\n    __typename: typenames.Use,\n    id: (id++).toString(),\n    ...use,\n  };\n}\n\nconst uses = {\n  Backend: createUse({\n    title: \"Backend\",\n  }),\n  Build: createUse({\n    title: \"Build\",\n  }),\n  Frontend: createUse({\n    title: \"Frontend\",\n  }),\n  None: createUse({\n    title: \"None\",\n  }),\n};\n\nexport default uses as { [key in keyof typeof uses]: Use };\n","import { createMuiTheme, Theme as MaterialUITheme } from \"@material-ui/core\";\n\nconst primaryColor = \"#4a679b\";\nconst secondaryColor = \"#909b4a\";\nconst trinaryColor = \"#9b554a\";\nconst languagesColor = \"#2988d4\";\n\nconst { spacing } = createMuiTheme();\n\nconst args = {\n  marginBottom: spacing(3),\n  primaryColor,\n  secondaryColor,\n  trinaryColor,\n  languagesColor,\n};\n\nexport type Theme = MaterialUITheme & typeof args;\n\nexport default createMuiTheme({}, args) as Theme;\n","import { useMemo } from \"react\";\nimport { Displayed, Tool, Use } from \"src/graphql/__generated__\";\nimport uses from \"src/graphql/data/uses\";\nimport typenames from \"src/graphql/typenames\";\nimport theme from \"src/theme\";\n\nconst { primaryColor, languagesColor, secondaryColor, trinaryColor } = theme;\n\nfunction getColorByUse(use: Use): string {\n  const { id } = use;\n\n  switch (id) {\n    case uses.Frontend.id:\n      return primaryColor;\n    case uses.Backend.id:\n      return secondaryColor;\n    case uses.Build.id:\n      return trinaryColor;\n  }\n\n  return \"\";\n}\n\nexport function getColorByType(\n  displayedNode: Displayed[] | Displayed,\n  parentDisplayedNodes?: Displayed[],\n): string {\n  // TODO: consider nodes with mixed use\n  const node = Array.isArray(displayedNode) ? displayedNode[0] : displayedNode;\n\n  // @ts-ignore\n  const { __typename } = node;\n\n  switch (__typename) {\n    case typenames.Use:\n      return getColorByUse(node as Use);\n    case typenames.Tool:\n      return getColorByUse((node as Tool).use);\n    case typenames.Language:\n      return parentDisplayedNodes\n        ? getColorByType(parentDisplayedNodes)\n        : languagesColor;\n    default:\n      return \"\";\n  }\n}\n\ntype ColorsByTypeParameters = Parameters<typeof getColorByType>;\n\nexport function useColorByType(\n  displayNode: ColorsByTypeParameters[0],\n  parentDisplayedNodes?: ColorsByTypeParameters[1],\n) {\n  return useMemo(() => getColorByType(displayNode, parentDisplayedNodes), [\n    displayNode,\n    parentDisplayedNodes,\n  ]);\n}\n","import { Company } from \"src/graphql/__generated__\";\nimport typenames from \"src/graphql/typenames\";\nimport { RequiredByElsePartial } from \"src/types\";\n\nlet id = 0;\nfunction createCompany(\n  company: RequiredByElsePartial<Company, \"address\" | \"name\">,\n): Company {\n  return {\n    __typename: typenames.Company,\n    id: (id++).toString(),\n    logo: \"\",\n    purpose: \"\",\n    url: \"\",\n    ...company,\n  };\n}\n\nconst companies = {\n  personal: createCompany({\n    address: {\n      __typename: typenames.Address,\n      state: \"CA\",\n      county: \"Irvine\",\n    },\n    name: \"Personal\",\n  }),\n  pmat: createCompany({\n    address: {\n      __typename: typenames.Address,\n      state: \"CA\",\n      county: \"San Diego\",\n    },\n    name: \"PMAT Inc.\",\n    purpose:\n      \"Company focused on developing solutions for the defense sector specializing in web applications providing situational awareness for command and control.\",\n    url: \"https://pmatinc.com\",\n  }),\n  lanternCredit: createCompany({\n    __typename: typenames.Company,\n    address: {\n      __typename: typenames.Address,\n      state: \"CA\",\n      county: \"Newport Beach\",\n    },\n    name: \"Lantern Credit\",\n    purpose:\n      \"Startup focused on modernizing the credit scoring industry by creating an application that allows users to modify their credit score in real time.\",\n    url: \"https://lanterncredit.com\",\n  }),\n  tableDesignArt: createCompany({\n    __typename: typenames.Company,\n    address: {\n      __typename: typenames.Address,\n      state: \"CA\",\n      county: \"Irvine\",\n    },\n    name: \"Table Design Art\",\n    purpose:\n      \"Startup company specializing in creating decorative table banners for special occasion.\",\n  }),\n  niksun: createCompany({\n    __typename: typenames.Company,\n    address: {\n      __typename: typenames.Address,\n      state: \"NJ\",\n      county: \"Princeton\",\n    },\n    name: \"Niksun\",\n    purpose: \"Company focused on providing network analysis software.\",\n    url: \"https://www.niksun.com\",\n  }),\n  scholarsForCharity: createCompany({\n    __typename: typenames.Company,\n    address: {\n      __typename: typenames.Address,\n      state: \"NJ\",\n      county: \"Princeton\",\n    },\n    name: \"Scholars for Charity\",\n    purpose: \"Nonprofit organization that designs websites for charity.\",\n  }),\n};\n\nexport default companies as { [key in keyof typeof companies]: Company };\n","import typenames from \"src/graphql/typenames\";\nimport { Language } from \"src/graphql/__generated__\";\nimport { RequiredByElsePartial } from \"src/types\";\nimport { publicUrl } from \"src/constants/config\";\n\nlet id = 0;\nfunction createLanguage(language: RequiredByElsePartial<Language, \"title\">) {\n  return {\n    __typename: typenames.Language,\n    id: (id++).toString(),\n    logo: \"\",\n    ...language,\n  };\n}\n\nconst languages = {\n  css: createLanguage({\n    title: \"CSS\",\n    url: \"https://en.wikipedia.org/wiki/Cascading_Style_Sheets\",\n  }),\n  bash: createLanguage({\n    title: \"Bash\",\n    url: \"https://en.wikipedia.org/wiki/Bash_(Unix_shell)\",\n    logo: `${publicUrl}/assets/skills/Bash.svg`,\n  }),\n  javascript: createLanguage({\n    title: \"JavaScript\",\n    url: \"https://en.wikipedia.org/wiki/JavaScript\",\n    logo: `${publicUrl}/assets/skills/JavaScript.svg`,\n  }),\n  java: createLanguage({\n    title: \"Java\",\n    url: \"https://en.wikipedia.org/wiki/Java_(programming_language)\",\n    logo: `${publicUrl}/assets/skills/Java.svg`,\n  }),\n  golang: createLanguage({\n    title: \"Golang\",\n    url: \"https://golang.org/\",\n    logo: `${publicUrl}/assets/skills/Groovy.svg`,\n  }),\n  groovy: createLanguage({\n    title: \"Groovy\",\n    url: \"https://groovy-lang.org/\",\n    logo: `${publicUrl}/assets/skills/Groovy.svg`,\n  }),\n  mysql: createLanguage({\n    title: \"MySQL\",\n    url: \"https://www.mysql.com/\",\n    logo: `${publicUrl}/assets/skills/MySQL.svg`,\n  }),\n  php: createLanguage({\n    title: \"PHP\",\n    url: \"https://www.php.net/\",\n    logo: `${publicUrl}/assets/skills/PHP.svg`,\n  }),\n  ruby: createLanguage({\n    title: \"Ruby\",\n    url: \"https://www.ruby-lang.org/en/\",\n    logo: `${publicUrl}/assets/skills/Ruby.svg`,\n  }),\n  sass: createLanguage({\n    title: \"Sass\",\n    url: \"https://sass-lang.com/\",\n    logo: `${publicUrl}/assets/skills/Sass.svg`,\n  }),\n  typescript: createLanguage({\n    title: \"TypeScript\",\n    url: \"https://www.typescriptlang.org/\",\n    logo: `${publicUrl}/assets/skills/TypeScript.svg`,\n  }),\n};\n\nexport default languages as { [key in keyof typeof languages]: Language };\n","import { Tool } from \"src/graphql/__generated__\";\n\nimport typenames from \"src/graphql/typenames\";\nimport { RequiredByElsePartial } from \"src/types\";\nimport { publicUrl } from \"src/constants/config\";\n\nimport languages from \"./languages\";\nimport uses from \"./uses\";\n\nlet id = 0;\nfunction createTool(tool: RequiredByElsePartial<Tool, \"title\">): Tool {\n  return {\n    __typename: typenames.Tool,\n    id: (id++).toString(),\n    url: \"\",\n    use: uses.None,\n    languages: null,\n    logo: \"\",\n    ...tool,\n  };\n}\n\nconst tools = {\n  angularJS: createTool({\n    title: \"AngularJS\",\n    url: \"https://angularjs.org\",\n    use: uses.Frontend,\n    languages: [languages.javascript],\n  }),\n  apollo: createTool({\n    title: \"Apollo\",\n    url: \"https://www.apollographql.com\",\n    use: uses.Frontend,\n    languages: [languages.typescript],\n  }),\n  bootstrap: createTool({\n    title: \"Bootstrap\",\n    url: \"https://github.com/twbs/bootstrap-sass\",\n    use: uses.Frontend,\n    languages: [languages.sass],\n  }),\n  cesium: createTool({\n    title: \"Cesium\",\n    url: \"https://cesium.com/cesiumjs\",\n    use: uses.Frontend,\n    languages: [languages.javascript],\n  }),\n  docker: createTool({\n    title: \"Docker\",\n    url: \"https://www.docker.com\",\n    use: uses.Build,\n    languages: [languages.bash],\n  }),\n  foundation: createTool({\n    title: \"Foundation\",\n    url: \"https://foundation.zurb.com\",\n    use: uses.Frontend,\n    languages: [languages.sass],\n  }),\n  gradle: createTool({\n    title: \"Gradle\",\n    url: \"https://gradle.org\",\n    use: uses.Build,\n    languages: [languages.groovy],\n  }),\n  graphql: createTool({\n    title: \"GraphQL\",\n    url: \"https://graphql.org\",\n    use: uses.Frontend,\n    languages: [languages.javascript],\n  }),\n  graphqlJava: createTool({\n    title: \"GraphQL Java\",\n    url: \"https://www.graphql-java.com\",\n    use: uses.Backend,\n    languages: [languages.java],\n  }),\n  smartGwt: createTool({\n    title: \"SmartGWT\",\n    url: \"https://www.smartclient.com/product/smartgwt.jsp\",\n    use: uses.Frontend,\n    languages: [languages.java],\n  }),\n  git: createTool({\n    title: \"Git\",\n    url: \"https://git-scm.com\",\n    use: uses.Build,\n    languages: [languages.bash],\n  }),\n  javaServlet: createTool({\n    title: \"Java Servlet\",\n    url: \"https://en.wikipedia.org/wiki/Java_servlet\",\n    use: uses.Backend,\n    languages: [languages.java],\n    logo: `${publicUrl}/assets/skills/Java.svg`,\n  }),\n  jspm: createTool({\n    title: \"jspm\",\n    url: \"https://jspm.io\",\n    use: uses.Build,\n    languages: [languages.javascript],\n  }),\n  leaflet: createTool({\n    title: \"Leaflet\",\n    url: \"https://leafletjs.com\",\n    use: uses.Frontend,\n    languages: [languages.javascript],\n  }),\n  liquid: createTool({\n    title: \"Liquid\",\n    url: \"https://help.shopify.com/en/themes/liquid\",\n    use: uses.Frontend,\n    languages: [languages.ruby],\n    logo: `${publicUrl}/assets/skills/Shopify.svg`,\n  }),\n  illustrator: createTool({\n    title: \"Illustrator\",\n    url: \"https://www.adobe.com/products/illustrator.html\",\n    use: uses.Frontend,\n  }),\n  photoshop: createTool({\n    title: \"Photoshop\",\n    url: \"https://www.adobe.com/products/photoshop.html\",\n    use: uses.Frontend,\n  }),\n  react: createTool({\n    title: \"React\",\n    url: \"https://reactjs.org\",\n    use: uses.Frontend,\n    languages: [languages.javascript],\n  }),\n  redux: createTool({\n    title: \"Redux\",\n    url: \"https://redux.js.org\",\n    use: uses.Frontend,\n    languages: [languages.javascript],\n  }),\n  webpack: createTool({\n    title: \"Webpack\",\n    url: \"https://webpack.js.org\",\n    use: uses.Build,\n    languages: [languages.javascript],\n  }),\n  timeOff: createTool({\n    title: \"Time off\",\n  }),\n};\n\nObject.values(tools).forEach((tool) => {\n  if (!tool.logo) {\n    tool.logo = `${publicUrl}/assets/skills/${tool.title}.svg`;\n  }\n});\n\nexport default tools as { [key in keyof typeof tools]: Tool };\n","import { DAY } from \"src/constants\";\nimport { experienceAssetsDirectory } from \"src/constants/config\";\nimport { Experience, History, SampleWork } from \"src/graphql/__generated__\";\nimport typenames from \"src/graphql/typenames\";\nimport { RequiredByElsePartial } from \"src/types\";\nimport companies from \"./companies\";\nimport languages from \"./languages\";\nimport tools from \"./tools\";\nimport uses from \"./uses\";\n\nlet experienceId = 0;\n\nfunction createExperience(\n  experience: RequiredByElsePartial<\n    Experience,\n    \"accomplishments\" | \"company\" | \"histories\" | \"startDate\"\n  >,\n): Experience {\n  const { startDate: startDateStr, endDate: endDateStr } = experience;\n  const endDate = endDateStr ? new Date(endDateStr) : new Date();\n  const startDate = new Date(startDateStr);\n  const days = (endDate.getTime() - startDate.getTime()) / DAY;\n\n  return {\n    __typename: typenames.Experience,\n    id: experienceId.toString(),\n    endDate: null,\n    hidden: false,\n    index: experienceId++,\n    jobType: \"\",\n    role: \"\",\n    days,\n    sampleWorks: [],\n    ...experience,\n  };\n}\n\nlet sampleWorkId = 0;\n\nfunction createSampleWork(\n  sampleWork: RequiredByElsePartial<SampleWork, \"description\" | \"image\">,\n): SampleWork {\n  return {\n    __typename: typenames.SampleWork,\n    id: (sampleWorkId++).toString(),\n    thumbnail: false,\n    caption: \"\",\n    ...sampleWork,\n  };\n}\n\nconst pmatCaption =\n  \"Due to the sensitive nature of the work only a older prototype with reduced capabilities can be shown.\";\n\nfunction createSampleWorkForPMAT(\n  sampleWork: Parameters<typeof createSampleWork>[0],\n): SampleWork {\n  return createSampleWork({\n    ...sampleWork,\n    caption: pmatCaption,\n  });\n}\n\nlet historyId = 0;\n\nfunction createHistory(\n  history: RequiredByElsePartial<History, \"values\">,\n): History {\n  const { values } = history;\n  const title = values.reduce((previousValue, { title }, index) => {\n    const slash = index !== values.length - 1 ? \"/\" : \"\";\n    return previousValue + title + slash;\n  }, \"\");\n\n  return {\n    __typename: typenames.History,\n    id: (historyId++).toString(),\n    children: null,\n    title,\n    utilization: null,\n    ...history,\n  };\n}\n\nconst experiences: Experience[] = [\n  createExperience({\n    company: companies.pmat,\n    role: \"Senior Frontend Developer\",\n    jobType: \"Full time\",\n    startDate: new Date(2018, 6, 9).toString(),\n    endDate: new Date(2021, 2, 12).toString(),\n    histories: [\n      createHistory({\n        values: [uses.Frontend],\n        utilization: 65,\n        children: [\n          createHistory({\n            values: [languages.javascript, languages.typescript],\n            children: [\n              createHistory({ values: [tools.react] }),\n              createHistory({ values: [tools.redux] }),\n              createHistory({ values: [tools.graphql] }),\n              createHistory({ values: [tools.apollo] }),\n              createHistory({ values: [tools.cesium] }),\n              createHistory({ values: [tools.leaflet] }),\n            ],\n          }),\n          createHistory({ values: [languages.sass], utilization: 5 }),\n        ],\n      }),\n      createHistory({\n        values: [uses.Backend],\n        utilization: 20,\n        children: [\n          createHistory({\n            values: [languages.java],\n            children: [\n              createHistory({ values: [tools.graphqlJava] }),\n              createHistory({ values: [tools.javaServlet] }),\n            ],\n          }),\n        ],\n      }),\n      createHistory({\n        values: [uses.Build],\n        utilization: 15,\n        children: [\n          createHistory({ values: [languages.bash] }),\n          createHistory({ values: [tools.docker] }),\n          createHistory({ values: [tools.gradle] }),\n          createHistory({ values: [tools.webpack] }),\n          createHistory({ values: [tools.git] }),\n        ],\n      }),\n    ],\n    accomplishments: [\n      \"Lead a team of 3 frontend developers transitioning core Angular application to one utilizing ReactJS + Apollo + Typescript improving overall code quality and performance.\",\n      \"Designed and implemented core application code, significant contributions include major rendering improvements by utilizing HTML canvas to render 50k+ entities on a map.\",\n      \"Introduced and maintaining GraphQL service, streamlining development process between backend and frontend teams.\",\n    ],\n    sampleWorks: [\n      createSampleWork({\n        description:\n          \"Splash screen that a user would be shown on first entering the application.\",\n        image: `${experienceAssetsDirectory}/pmat/welcome.png`,\n        thumbnail: true,\n      }),\n      createSampleWork({\n        description:\n          \"The purpose of this application was to provide situational awareness to a operator, at the most basic level this was accomplished by providing the operators with a map that showed all entities in a area of interest. The position of these entities would be constantly updated via a stream of data from a websockets.\",\n        image: `${experienceAssetsDirectory}/pmat/mock.png`,\n        thumbnail: true,\n      }),\n      createSampleWork({\n        description: pmatCaption,\n        image: `${experienceAssetsDirectory}/pmat/base.png`,\n        thumbnail: true,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"Operators could select a entity on the map to extract further details about the given entity and determine it's threat level. Multiple entities could be simultaneously selected for later comparison.\",\n        image: `${experienceAssetsDirectory}/pmat/dialog-quick-list.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"Various overlays and configurations were available to operators enhancing their capabilities allowing them to rapidly determine a entity's threat level.\",\n        image: `${experienceAssetsDirectory}/pmat/left-panel.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"Overlaying weather reports was frequently used by operators conducting search and rescue operations\",\n        image: `${experienceAssetsDirectory}/pmat/left-panel-layers.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"The 3D mode could be used to quickly understand the relatively altitudes of multiple entities.\",\n        image: `${experienceAssetsDirectory}/pmat/base-3d.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"A example of the application handling 100,000 entities, the entities shown here are generated.\",\n        image: `${experienceAssetsDirectory}/pmat/base-generated.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"KML (Keyhole Markup Language) was supported to allow operators to import overlays from Google Earth.\",\n        image: `${experienceAssetsDirectory}/pmat/kml.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"The alerting system allowed operators to set specific conditions to notify them of certain threats.\",\n        image: `${experienceAssetsDirectory}/pmat/alerts.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"A alert could be set based on specific geospatial bounds or more general criteria such as if the entity was was in the air and at what altitude.\",\n        image: `${experienceAssetsDirectory}/pmat/alert-editing.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"A alert's geospatial bounds could be set manually but drawing tools were implemented allowing the user to convert between different shapes and modes.\",\n        image: `${experienceAssetsDirectory}/pmat/alert-editing-manual.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"A alert's geospatial shape could be seamlessly swapped between a from a rectangle to a polygon.\",\n        image: `${experienceAssetsDirectory}/pmat/alert-editing-manual-polygon.png`,\n      }),\n      createSampleWorkForPMAT({\n        description:\n          \"A alert's geospatial mode could be seamlessly swapped from manually inputting the latitude and longitude to using a set of drawing tools.\",\n        image: `${experienceAssetsDirectory}/pmat/alert-editing-drawing-polygon.png`,\n      }),\n    ],\n  }),\n  createExperience({\n    company: companies.personal,\n    startDate: new Date(2018, 1, 1).toString(),\n    endDate: new Date(2018, 6, 1).toString(),\n    histories: [\n      createHistory({ values: [tools.react] }),\n      createHistory({ values: [tools.graphql] }),\n      createHistory({ values: [languages.sass] }),\n      createHistory({\n        values: [tools.timeOff],\n        utilization: 50,\n      }),\n    ],\n    accomplishments: [\n      \"Experiment with GraphQL and ApolloJS on attempted website rewrite\",\n    ],\n    hidden: true,\n  }),\n  createExperience({\n    company: companies.lanternCredit,\n    role: \"Full Stack Developer\",\n    jobType: \"Full time\",\n    startDate: new Date(2015, 5, 1).toString(),\n    endDate: new Date(2018, 1, 1).toString(),\n    histories: [\n      createHistory({\n        values: [uses.Frontend],\n        utilization: 55,\n        children: [\n          createHistory({\n            values: [languages.javascript],\n            children: [\n              createHistory({\n                values: [tools.react],\n                utilization: 90,\n              }),\n              createHistory({\n                values: [tools.graphql],\n                utilization: 10,\n              }),\n            ],\n          }),\n          createHistory({ values: [languages.sass], utilization: 10 }),\n        ],\n      }),\n      createHistory({\n        values: [uses.Backend],\n        utilization: 30,\n        children: [createHistory({ values: [languages.golang] })],\n      }),\n      createHistory({\n        values: [uses.Build],\n        utilization: 15,\n        children: [\n          createHistory({ values: [languages.bash] }),\n          createHistory({ values: [tools.docker] }),\n          createHistory({ values: [tools.webpack] }),\n          createHistory({ values: [tools.git] }),\n        ],\n      }),\n    ],\n    accomplishments: [\n      \"Used React to make important contributions to several parts of the core application, with major contributions going towards enhancing user knowledge of the factors that affect their credit score.\",\n      \"Maintained front end build and deployment pipeline and incorporating new technologies to streamline development such as SASS and CSS modules.\",\n      \"Created several microservices using Golang to retrieve data from credit agencies such as Transunion and Equifax.\",\n      \"Built and deployed microservices using Docker, took part in the creation of a 3-tier architecture creating a system that was both secure and scalable.\",\n    ],\n    sampleWorks: [\n      createSampleWork({\n        description:\n          \"Main dashboard, showing user's current credit score and other helpful links to explain how a credit score is determined.\",\n        image: `${experienceAssetsDirectory}/lantern credit/dashboard.png`,\n      }),\n      createSampleWork({\n        description:\n          \"The Interactive Credit Report was the main selling point of the application, allowing the user to simulate changes to their credit score based on the what offer(s) were selected.\",\n        image: `${experienceAssetsDirectory}/lantern credit/interactive-credit-report.png`,\n      }),\n      createSampleWork({\n        description:\n          \"Summary page of the major factors that affect a user's credit score.\",\n        image: `${experienceAssetsDirectory}/lantern credit/credit-factors.png`,\n      }),\n      createSampleWork({\n        description:\n          \"Summary page of the various accounts a user has open and closed.\",\n        image: `${experienceAssetsDirectory}/lantern credit/credit-factors-total-accounts.png`,\n      }),\n      createSampleWork({\n        description:\n          \"Graph showing user where their credit score falls in the United States.\",\n        image: `${experienceAssetsDirectory}/lantern credit/national-averages.png`,\n      }),\n    ],\n  }),\n  createExperience({\n    company: companies.tableDesignArt,\n    role: \"Web Developer\",\n    jobType: \"Part time\",\n    startDate: new Date(2015, 3, 1).toString(),\n    endDate: new Date(2015, 5, 1).toString(),\n    histories: [\n      createHistory({ values: [tools.liquid] }),\n      createHistory({ values: [languages.sass] }),\n      createHistory({ values: [languages.javascript] }),\n    ],\n    accomplishments: [\n      \"Used Shopify to rapidly create a webstore, used the Liquid templating language to customize appearance.\",\n      \"Simplified shipping process by integrating webstore with shipping providers such as FedEx and UPS.\",\n      \"Helped manage social media campaigns on Facebook, Pinterest, and Twitter.\",\n    ],\n    hidden: true,\n  }),\n  createExperience({\n    company: companies.personal,\n    startDate: new Date(2015, 2, 1).toString(),\n    endDate: new Date(2015, 5, 1).toString(),\n    histories: [\n      createHistory({ values: [tools.angularJS] }),\n      createHistory({ values: [tools.foundation] }),\n      createHistory({ values: [tools.jspm], utilization: 15 }),\n      createHistory({ values: [tools.timeOff] }),\n    ],\n    accomplishments: [\n      \"Created personal site using AngularJS\",\n      \"Studied JS using Professional JavaScript for Web Developers, 3rd Edition\",\n      \"Studied AngularJS using Build Your Own AngularJS\",\n    ],\n    hidden: true,\n  }),\n  createExperience({\n    company: companies.niksun,\n    role: \"Web Developer\",\n    jobType: \"Full time\",\n    startDate: new Date(2013, 8, 1).toString(),\n    endDate: new Date(2015, 1, 1).toString(),\n    histories: [\n      createHistory({\n        values: [uses.Frontend],\n        utilization: 85,\n        children: [\n          createHistory({\n            values: [tools.smartGwt],\n            utilization: 60,\n          }),\n          createHistory({\n            values: [tools.angularJS],\n            utilization: 25,\n          }),\n          createHistory({\n            values: [tools.bootstrap],\n            utilization: 10,\n          }),\n          createHistory({ values: [tools.photoshop] }),\n          createHistory({ values: [tools.illustrator] }),\n        ],\n      }),\n      createHistory({\n        values: [uses.Build],\n        utilization: 15,\n        children: [\n          createHistory({\n            values: [tools.gradle],\n          }),\n          createHistory({\n            values: [tools.git],\n          }),\n        ],\n      }),\n    ],\n    accomplishments: [\n      \"Created a real time reporting web application for Niksun's file analysis service, used by several clients including Wells Fargo.\",\n      \"Rapidly designed and wireframed several prototypes in an effort to modernize Niksun's client facing applications.\",\n      \"Created a workspace setup and build script using Gradle, significantly reducing onboarding time of new developers.\",\n    ],\n    sampleWorks: [\n      createSampleWork({\n        description:\n          \"Proposal for new company homepage, designed using Photoshop.\",\n        image: `${experienceAssetsDirectory}/niksun/website-template.png`,\n      }),\n      createSampleWork({\n        description:\n          \"Prototype of new NetDetector, Niksun's network analysis software, implemented using GWT. This is a mock I designed in Photoshop, screenshots of the actually product are proprietary.\",\n        image: `${experienceAssetsDirectory}/niksun/template-with-pods.png`,\n      }),\n      createSampleWork({\n        description:\n          \"Redesigned login page for Niksun client facing applications.\",\n        image: `${experienceAssetsDirectory}/niksun/login-template.png`,\n      }),\n    ],\n  }),\n  createExperience({\n    company: companies.scholarsForCharity,\n    role: \"Webmaster\",\n    jobType: \"Volunteer\",\n    startDate: new Date(2012, 4, 1).toString(),\n    endDate: new Date(2013, 4, 1).toString(),\n    histories: [\n      createHistory({\n        values: [uses.Frontend],\n        utilization: 80,\n        children: [\n          createHistory({ values: [languages.javascript] }),\n          createHistory({ values: [tools.foundation] }),\n          createHistory({ values: [tools.photoshop] }),\n          createHistory({ values: [tools.illustrator] }),\n        ],\n      }),\n      createHistory({\n        values: [uses.Backend],\n        children: [\n          createHistory({ values: [languages.php] }),\n          createHistory({ values: [languages.mysql] }),\n        ],\n      }),\n    ],\n    accomplishments: [\n      \"Gathered requirements, designed graphics, and created sites for clients.\",\n      \"Lead sessions for web and graphic design, training new members in basic development techniques and best practices.\",\n      \"Actively promoted organization and responsible for recruiting several members.\",\n    ],\n    sampleWorks: [\n      createSampleWork({\n        description: \"Redesigned banner for organization's site\",\n        image: `${experienceAssetsDirectory}/scholars for charity/banner.png`,\n      }),\n      createSampleWork({\n        description:\n          \"Designed banner for client, Quintessence Music, a organization that helps promote local music groups.\",\n        image: `${experienceAssetsDirectory}/scholars for charity/quintessence.png`,\n      }),\n    ],\n  }),\n];\n\nexport default experiences;\n","import {\n  Displayed,\n  Experience,\n  History,\n  Language,\n  Skill,\n  Tool,\n  Use,\n} from \"src/graphql/__generated__\";\nimport typenames from \"src/graphql/typenames\";\nimport { NonNullableBy, RequiredByElsePartial } from \"src/types\";\nimport experiences from \"./experiences\";\nimport tools from \"./tools\";\n\ntype SkillRequiredProperties = RequiredByElsePartial<\n  Skill,\n  \"experience\" | \"utilization\" | \"values\"\n>;\n\ntype SkillRequiredPropertiesMap = {\n  [key: string]: SkillRequiredProperties;\n};\n\nexport type HistoryWithChildren = NonNullableBy<History, \"children\">;\n\nexport function computeUtilization(\n  history: History,\n  historyParent: HistoryWithChildren | undefined,\n  historyParentDays: number,\n  histories?: History[],\n): number {\n  let { utilization } = history;\n\n  if (utilization) {\n    return historyParentDays * (utilization / 100);\n  }\n\n  // Else no utilization\n  const children = historyParent ? historyParent.children : histories;\n\n  if (!children) {\n    throw new Error(\n      `historyParent or histories not provided for history with id: ${history.id}`,\n    );\n  }\n\n  const childrenWithUtilization = children.filter(\n    ({ utilization }) => utilization,\n  );\n\n  // Siblings do not have set utilizations\n  if (!childrenWithUtilization) {\n    // Split utilization evenly between children\n    return historyParentDays / children.length;\n  }\n\n  const siblingUtilizations =\n    children.reduce((prev, { utilization }) => prev + (utilization ?? 0), 0) /\n    100;\n\n  // Else siblings have set utilizations\n  return (\n    // Compute utilization from remainder of sibling utilizations\n    (historyParentDays * (1 - siblingUtilizations)) /\n    (children.length - childrenWithUtilization.length)\n  );\n}\n\nfunction isHistoryWithChildren(\n  history: History,\n): history is HistoryWithChildren {\n  return Boolean(history.children);\n}\n\nfunction computeSkillsFromHistory(\n  history: History,\n  historyParent: HistoryWithChildren | undefined,\n  historyParentDays: number,\n  experience: Experience,\n  onlyLanguages: boolean = false,\n): SkillRequiredProperties[] {\n  const skills: SkillRequiredProperties[] = [];\n  const { values } = history;\n\n  let computedUtilization = computeUtilization(\n    history,\n    historyParent,\n    historyParentDays,\n    experience.histories,\n  );\n\n  // Has parent\n  if (historyParent) {\n    const parentIsOnlyLanguages = !(historyParent.values as Language[]).some(\n      (value) => value.__typename !== typenames.Language,\n    );\n\n    // Has parent and parent is only languages\n    if (parentIsOnlyLanguages) {\n      const languages = historyParent.values as Language[];\n\n      skills.push({\n        experience,\n        // Override languages with parent languages\n        languages,\n        utilization: computedUtilization,\n        values,\n      });\n      return skills;\n    }\n  }\n\n  const uses = values as Use[];\n  const isOnlyUses = !uses.some(\n    ({ __typename }) => __typename !== typenames.Use,\n  );\n\n  // Values are only uses\n  if (isOnlyUses) {\n    skills.push({\n      experience,\n      values,\n      utilization: computedUtilization,\n    });\n  }\n\n  const tools = values as Tool[];\n  const isOnlyTools = !tools.some(\n    ({ __typename }) => __typename !== typenames.Tool,\n  );\n\n  // Values are only tools\n  if (isOnlyTools) {\n    // Extract languages if they exists\n    const languages = tools.reduce<Language[]>((prev, { languages }) => {\n      if (languages) {\n        prev.push(...languages);\n        return prev;\n      }\n      return prev;\n    }, []);\n\n    skills.push({\n      experience,\n      values,\n      utilization: computedUtilization,\n      // If tool doesn't have languages then set to null\n      languages: languages.length !== 0 ? languages : null,\n    });\n  }\n\n  const languages = values as Language[];\n  const isOnlyLanguages = !languages.some(\n    ({ __typename }) => __typename !== typenames.Language,\n  );\n\n  // Values are only languages\n  if (isOnlyLanguages) {\n    skills.push({\n      experience,\n      values,\n      utilization: computedUtilization,\n      languages,\n    });\n\n    // If computing only languages don't recurse to children, as history which\n    // are languages are always wrappers for the children and would result in\n    // doubling of the language utilization\n    if (onlyLanguages) {\n      return skills;\n    }\n  }\n\n  // If history has children\n  if (isHistoryWithChildren(history)) {\n    // Loop through children\n    for (const childrenHistory of history.children) {\n      skills.push(\n        // Recurse\n        ...computeSkillsFromHistory(\n          childrenHistory,\n          history,\n          computedUtilization,\n          experience,\n          onlyLanguages,\n        ),\n      );\n    }\n  }\n\n  return skills;\n}\n\nfunction computeSkillsFromExperiences(\n  onlyLanguages?: boolean,\n): SkillRequiredProperties[] {\n  return experiences.reduce<SkillRequiredProperties[]>((skills, experience) => {\n    const { histories, days } = experience;\n\n    for (const history of histories) {\n      skills.push(\n        ...computeSkillsFromHistory(\n          history,\n          undefined,\n          days,\n          experience,\n          onlyLanguages,\n        ),\n      );\n    }\n\n    return skills;\n  }, []);\n}\n\nlet id = 0;\nfunction createSkill(skill: SkillRequiredProperties): Skill {\n  return {\n    __typename: typenames.Skill,\n    id: (id++).toString(),\n    languages: null,\n    title: skill.values.map(({ title }) => title).join(\" \"),\n    value: skill.values[0],\n    ...skill,\n  };\n}\n\nfunction getCacheKey(displayedNode: Displayed): string {\n  // @ts-ignore\n  const { __typename, id } = displayedNode;\n  return `${__typename}:${id}`;\n}\n\nfunction aggregateSkillUtilization(\n  skills: SkillRequiredProperties[],\n): SkillRequiredProperties[] {\n  const skillsMap = skills.reduce<SkillRequiredPropertiesMap>(\n    (skillsMap, skill) => {\n      const { utilization, values } = skill;\n\n      values.forEach((value) => {\n        const id = getCacheKey(value);\n        const skillInSkillMap: SkillRequiredProperties = skillsMap[id];\n\n        if (!skillInSkillMap) {\n          skillsMap[id] = createSkill({\n            ...skill,\n            values: [value],\n            utilization,\n          });\n          return;\n        }\n\n        skillInSkillMap.utilization += utilization;\n      });\n\n      return skillsMap;\n    },\n    {},\n  );\n\n  return Object.values(skillsMap);\n}\n\nconst skills = aggregateSkillUtilization(\n  computeSkillsFromExperiences(),\n).filter(({ values }) =>\n  (values as Tool[]).find((tool) => tool.id !== tools.timeOff.id),\n);\n\nconst skillsLanguages = computeSkillsFromExperiences(\n  true,\n).reduce<SkillRequiredPropertiesMap>((skillMap, skill) => {\n  const { languages, utilization, experience } = skill;\n\n  if (!languages) {\n    return skillMap;\n  }\n\n  languages.forEach((language) => {\n    const { id } = language;\n    const skillInSkillMap = skillMap[id];\n\n    if (!skillInSkillMap) {\n      skillMap[id] = createSkill({\n        values: [language],\n        utilization,\n        experience,\n        languages: [language],\n      });\n      return;\n    }\n    skillInSkillMap.utilization += utilization;\n  });\n\n  return skillMap;\n}, {});\n\nconst skillsTools = skills\n  .filter(({ values }) =>\n    (values as Tool[]).find((tool) => tool.__typename === typenames.Tool),\n  )\n  .sort((a, b) => b.utilization - a.utilization);\n\nexport default Object.values(skillsLanguages)\n  .sort((a, b) => b.utilization - a.utilization)\n  .concat(skillsTools);\n","import clsx from \"clsx\";\nimport React, { FC, useCallback, useMemo } from \"react\";\nimport { useStyles } from \"src/components/Experiences/StylesProvider\";\nimport Link from \"src/components/Link\";\nimport { useColorByType } from \"src/components/utility\";\nimport { ExperienceFieldsFragment } from \"src/graphql/__generated__\";\nimport {\n  computeUtilization,\n  HistoryWithChildren,\n} from \"src/graphql/data/skills\";\nimport typenames from \"src/graphql/typenames\";\nimport { ExtractArrayType } from \"src/types\";\n\ntype HistoryType = ExtractArrayType<ExperienceFieldsFragment[\"histories\"]>;\n\nexport const History: FC<{\n  history: HistoryType;\n  historyParent?: HistoryWithChildren;\n  historyParentUtilization: number;\n  histories?: HistoryType[];\n  depth: number;\n}> = ({\n  history,\n  historyParent,\n  historyParentUtilization,\n  histories,\n  depth,\n}) => {\n  const { children, title, values } = history;\n  let utilization = computeUtilization(\n    history,\n    historyParent,\n    historyParentUtilization,\n    histories,\n  );\n\n  const utilizationRounded = Math.round(utilization);\n\n  const backgroundColor = useColorByType(\n    values,\n    historyParent && historyParent.values,\n  );\n\n  const url = useMemo(() => {\n    const value = values[0];\n    // Value type is Language or Tool\n    if (\n      value.__typename === typenames.Language ||\n      value.__typename === typenames.Tool\n    ) {\n      return value.url;\n    }\n  }, [values]);\n\n  const stopPropagation = useCallback((e) => url && e.stopPropagation(), [url]);\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.history} style={{ flexBasis: `${utilization}%` }}>\n      <div\n        className={clsx(\n          classes.history_title,\n          depth === 0 && classes.history_title__root,\n        )}\n        style={{ backgroundColor }}\n      >\n        <Link href={url} colorOverride=\"white\" onClick={stopPropagation}>\n          {title} {utilizationRounded}%\n        </Link>\n      </div>\n      {children && (\n        <div className={classes.histories}>\n          {children.map((childHistory) => {\n            const component = (\n              <History\n                key={childHistory.id}\n                history={childHistory}\n                // Typecast is necessary as history is guaranteed to have\n                // children here but TypeScript cannot identify\n                historyParent={history as HistoryWithChildren}\n                historyParentUtilization={100}\n                depth={++depth}\n              />\n            );\n            --depth;\n            return component;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default History;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nconst edgeIconSize = 14;\nconst edgeIconBorderWidth = 3;\nexport const edgeSize = edgeIconSize;\nexport const edgeSizeHalf = edgeSize / 2;\n\nconst vertexWidth = 1;\nconst vertexOverlayWidth = 2;\n\nexport default makeStyles<Theme>(\n  ({\n    spacing,\n    primaryColor,\n    trinaryColor,\n    palette: {\n      common: { white },\n    },\n  }) => ({\n    root: {\n      position: \"relative\",\n      display: \"flex\",\n      padding: spacing(0, 9, 0, 0),\n    },\n    vertex: {\n      boxSizing: \"border-box\",\n      border: `${vertexWidth}px solid ${primaryColor}`,\n      height: \"100%\",\n      position: \"absolute\",\n      // Transform to center line with edge\n      transform: `translate(${edgeSizeHalf - vertexWidth}px)`,\n    },\n    vertex_overlay: {\n      extend: \"vertex\",\n      border: `${vertexOverlayWidth}px solid ${trinaryColor}`,\n      transform: `translate(${edgeSizeHalf - vertexOverlayWidth}px)`,\n    },\n    edge: {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    edge_icon: {\n      boxSizing: \"border-box\",\n      background: white,\n      border: `${edgeIconBorderWidth}px solid ${primaryColor}`,\n      borderRadius: \"50%\",\n      height: edgeIconSize,\n      width: edgeIconSize,\n    },\n    edge_text: {\n      position: \"absolute\",\n      left: edgeSize + 5,\n    },\n  }),\n);\n","import React, { FC, useMemo } from \"react\";\nimport { DAY } from \"src/constants\";\nimport {\n  ExperiencesGetQuery,\n  useExperiencesGetQuery,\n} from \"src/graphql/__generated__\";\nimport { ExtractArrayType } from \"src/types\";\nimport useStyles, { edgeSizeHalf } from \"./styles\";\n\ntype TimelineValues = { year: number; position?: number };\n\nconst Timeline: FC<{\n  experience: ExtractArrayType<ExperiencesGetQuery[\"experiences\"]>;\n}> = ({\n  experience: { days, startDate: startDateStr, endDate: endDateStr, index },\n}) => {\n  const { data } = useExperiencesGetQuery();\n  const experiences = data?.experiences ?? [];\n\n  const isMostRecentExperience = index === 0;\n  const isOldestExperience = index === experiences.length - 1;\n\n  const startDate = useMemo(() => new Date(startDateStr), [startDateStr]);\n  const endDate = useMemo(\n    () => (endDateStr ? new Date(endDateStr) : new Date()),\n    [endDateStr],\n  );\n\n  const startYearNum = startDate.getFullYear();\n  const endYearNum = endDate.getFullYear();\n  const numberOfYearsBetweenStartAndEndDates = endYearNum - startYearNum;\n  const numberOfYearsBetweenStartAndEndDatesWithPadding =\n    numberOfYearsBetweenStartAndEndDates + 2;\n\n  const timelineValues = useMemo<TimelineValues[]>(() => {\n    const values: TimelineValues[] = [];\n\n    for (let i = 0; i < numberOfYearsBetweenStartAndEndDatesWithPadding; i++) {\n      const year = endYearNum + 1 - i;\n      values.push({\n        year,\n        position: (100 / numberOfYearsBetweenStartAndEndDatesWithPadding) * i,\n      });\n    }\n\n    return values;\n  }, [endYearNum, numberOfYearsBetweenStartAndEndDatesWithPadding]);\n\n  const { height, top } = useMemo(() => {\n    // Percentage of days worked between start year +1 and end year +1\n    const height =\n      days / (numberOfYearsBetweenStartAndEndDatesWithPadding * 365);\n\n    const endDateEndOfYear = new Date(endYearNum, 11, 31);\n    const daysFromEndDateTillEndDateEndOfYear =\n      (endDateEndOfYear.getTime() - endDate.getTime()) / DAY;\n\n    // Percentage of the last year at a job that wasn't worked\n    const top =\n      daysFromEndDateTillEndDateEndOfYear /\n      365 /\n      numberOfYearsBetweenStartAndEndDatesWithPadding;\n\n    return {\n      // Vertex needs padding when dates start/end near the begin/end of year as\n      // edge will overlap and hide the ends of the vertex\n      height: `calc(${height * 100}% + ${edgeSizeHalf}px)`,\n      top: `calc(${top * 100}% - ${edgeSizeHalf}px)`,\n    };\n  }, [\n    days,\n    endDate,\n    endYearNum,\n    numberOfYearsBetweenStartAndEndDatesWithPadding,\n  ]);\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.vertex} />\n      <div className={classes.vertex_overlay} style={{ height, top }} />\n      {timelineValues.map(({ year, position }, index) => {\n        if (index === 0 && !isMostRecentExperience) {\n          return null;\n        }\n\n        if (index === timelineValues.length - 1 && !isOldestExperience) {\n          return null;\n        }\n\n        return (\n          <div\n            key={index}\n            className={classes.edge}\n            style={{ top: `${position}%` }}\n          >\n            <div className={classes.edge_icon} />\n            <div className={classes.edge_text}>{year}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import {\n  Dialog,\n  DialogContent,\n  Grid,\n  GridProps,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { FC, useCallback, useMemo, useState } from \"react\";\nimport Carousel from \"react-material-ui-carousel\";\nimport History from \"src/components/Experiences/History\";\nimport { useStyles } from \"src/components/Experiences/StylesProvider\";\nimport Timeline from \"src/components/Experiences/Timeline\";\nimport Link from \"src/components/Link\";\nimport { ExperiencesGetQuery } from \"src/graphql/__generated__\";\nimport { ExtractArrayType } from \"src/types\";\n\nfunction renderDate(dateStr: string): string {\n  const date = new Date(dateStr);\n  return `${date.getMonth() + 1}/${date.getFullYear()}`;\n}\n\nconst Experience: FC<{\n  experience: ExtractArrayType<ExperiencesGetQuery[\"experiences\"]>;\n}> = ({ experience }) => {\n  const [historyExpanded, setHistoryExpanded] = useState(false);\n\n  const handleHistoryRootClick = useCallback(() => {\n    setHistoryExpanded(!historyExpanded);\n  }, [historyExpanded]);\n\n  const classes = useStyles();\n\n  const {\n    accomplishments,\n    company,\n    company: {\n      address: { county, state },\n      purpose,\n      url,\n    },\n    endDate,\n    role,\n    histories,\n    startDate,\n    sampleWorks,\n  } = experience;\n\n  const sampleWorksThumbnails = useMemo(() => {\n    if (sampleWorks.length <= 3) {\n      return sampleWorks;\n    }\n\n    // Else sampleWorks.length > 3\n\n    const sampleWorksThumbnails = sampleWorks.filter(\n      ({ thumbnail }) => thumbnail,\n    );\n\n    // SampleWorks has assigned thumbnails\n\n    if (sampleWorksThumbnails.length !== 0) {\n      return sampleWorksThumbnails.length <= 3\n        ? sampleWorksThumbnails\n        : [...sampleWorksThumbnails].splice(0, 3);\n    }\n\n    // SampleWorks does not have assigned thumbnails\n    return [...sampleWorks].splice(0, 3);\n  }, [sampleWorks]);\n\n  const [sampleWorkDialogOpen, setSampleWorkDialogOpen] = useState(false);\n  const [sampleWorkSelectedId, setSampleWorkSelectedId] = useState(\"\");\n\n  const handleSampleWorksToggle = useCallback(\n    (id: string) => {\n      setSampleWorkSelectedId(id);\n      setSampleWorkDialogOpen(!sampleWorkDialogOpen);\n    },\n    [sampleWorkDialogOpen],\n  );\n\n  return (\n    <Grid item xs={12} className={classes.experience}>\n      <Timeline experience={experience} />\n      <div className={classes.experience_content}>\n        <div className={classes.header}>\n          <div className={classes.company}>\n            <div className={classes.company_name}>\n              <Link color=\"primary\" href={url}>\n                {company.name}\n              </Link>\n            </div>\n            <div className={classes.company_location}>\n              {county}, {state}\n            </div>\n          </div>\n          <div className={classes.header_right}>\n            <div className={classes.role}>{role}</div>\n            <div className={classes.startEndDate}>\n              {renderDate(startDate)} -{\" \"}\n              {endDate ? renderDate(endDate) : \"Current\"}\n            </div>\n          </div>\n        </div>\n\n        <div className={classes.purpose}>{purpose}</div>\n\n        <div className={classes.accomplishments}>\n          <ul>\n            {accomplishments.map((accomplishment, index) => (\n              <li key={index}>{accomplishment}</li>\n            ))}\n          </ul>\n        </div>\n\n        <div\n          className={clsx(\n            classes.history,\n            historyExpanded && classes.history__expanded,\n          )}\n          onClick={handleHistoryRootClick}\n        >\n          <div className={classes.histories}>\n            {histories.map((history) => (\n              <History\n                key={history.id}\n                history={history}\n                historyParentUtilization={100}\n                histories={histories}\n                depth={0}\n              />\n            ))}\n          </div>\n        </div>\n\n        <Grid className={classes.sampleWorks} container spacing={2}>\n          {sampleWorksThumbnails.map(({ description, image, id }) => (\n            <Grid\n              onClick={handleSampleWorksToggle.bind(undefined, id)}\n              className={classes.sampleWork}\n              item\n              key={id}\n              xs={\n                Math.round(12 / sampleWorksThumbnails.length) as GridProps[\"xs\"]\n              }\n            >\n              <img\n                className={classes.sampleWork_image}\n                src={image}\n                alt={description}\n              />\n            </Grid>\n          ))}\n        </Grid>\n\n        <Dialog\n          maxWidth=\"md\"\n          open={sampleWorkDialogOpen}\n          onClose={handleSampleWorksToggle}\n        >\n          <DialogContent>\n            <Carousel\n              index={sampleWorks.findIndex(\n                (sampleWork) => sampleWorkSelectedId === sampleWork.id,\n              )}\n              animation=\"slide\"\n              autoPlay={false}\n            >\n              {sampleWorks.map(({ caption, description, image, id }) => (\n                <div key={id}>\n                  <img\n                    className={classes.carousel_image}\n                    key={id}\n                    src={image}\n                    alt={description}\n                  />\n                  <Typography>{description}</Typography>\n                  {caption && (\n                    <Typography variant=\"caption\">{caption}</Typography>\n                  )}\n                </div>\n              ))}\n            </Carousel>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </Grid>\n  );\n};\n\nexport default Experience;\n","import { Grid } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { useScrollElementTrackerRefCallback } from \"src/components/ScrollElementTracker\";\nimport { experiencesListenerId } from \"src/constants\";\nimport { useExperiencesGetQuery } from \"src/graphql/__generated__\";\nimport Experience from \"./Experience\";\nimport { useStyles } from \"./StylesProvider\";\n\nconst Experiences: FC = () => {\n  const { data } = useExperiencesGetQuery();\n  const experiences = data?.experiences ?? [];\n\n  const scrollElementTrackerRef = useScrollElementTrackerRefCallback(\n    experiencesListenerId,\n  );\n\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root} ref={scrollElementTrackerRef}>\n      {experiences\n        .filter(({ hidden }) => !hidden)\n        .map((experience) => (\n          <Experience key={experience.id} experience={experience} />\n        ))}\n    </Grid>\n  );\n};\n\nexport default Experiences;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nconst history_titleTransitionDuration = \"200ms\";\nconst history_titleTransitionFunction = \"ease\";\n\nconst history_titleTransition = [\n  `${history_titleTransitionDuration} height ${history_titleTransitionFunction}`,\n  `${history_titleTransitionDuration} margin ${history_titleTransitionFunction}`,\n].join(\", \");\n\nconst history_titleFontSize = \"16px\";\nconst history_titleLineHeight = \"1.2\";\n\nexport default makeStyles<Theme>(\n  ({\n    spacing,\n    palette: {\n      common: { black },\n      divider,\n    },\n    marginBottom,\n    primaryColor,\n    secondaryColor,\n    trinaryColor,\n  }) => ({\n    root: {\n      marginBottom: marginBottom,\n\n      \"& $experience:last-child\": {\n        \"& $experience_content\": {\n          marginBottom: 0,\n          borderBottom: \"none\",\n        },\n      },\n    },\n\n    experience: {\n      display: \"flex\",\n    },\n\n    experience_content: {\n      flex: 1,\n      marginBottom: marginBottom,\n      borderBottom: `2px solid ${divider}`,\n      \"& > $history\": {\n        marginBottom: marginBottom,\n      },\n    },\n\n    header: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      marginBottom: marginBottom,\n    },\n\n    company: {},\n    company_name: {\n      fontWeight: 600,\n    },\n    company_location: {\n      color: black,\n      fontWeight: 500,\n    },\n\n    header_right: {\n      textAlign: \"right\",\n      color: \"#555555\",\n      fontWeight: 500,\n    },\n    role: {},\n    startEndDate: {},\n\n    purpose: {\n      marginBottom: marginBottom,\n    },\n\n    accomplishments: {},\n\n    // History\n    history_title__expanded: {\n      height: `calc(${history_titleFontSize} * ${history_titleLineHeight})`,\n      width: \"auto\",\n      margin: `0 3px ${spacing(1)}px`,\n      padding: \"1px 5px\",\n      borderRadius: 2,\n\n      fontSize: history_titleFontSize,\n      lineHeight: history_titleLineHeight,\n    },\n    history: {\n      flex: 1,\n      \"&:hover > $histories > $history > $history_title\": {\n        extend: \"history_title__expanded\",\n      },\n    },\n    history__expanded: {\n      \"& $history_title\": {\n        extend: \"history_title__expanded\",\n      },\n      \"& > $histories\": {\n        flexWrap: \"wrap\",\n      },\n    },\n    histories: {\n      display: \"flex\",\n    },\n    history_title: {\n      display: \"block\",\n\n      height: \"0\",\n      width: \"0\",\n      margin: \"0\",\n      padding: \"0\",\n\n      borderRadius: \"0\",\n\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textAlign: \"center\",\n\n      transition: history_titleTransition,\n    },\n    history_title__root: {\n      extend: \"history_title__expanded\",\n      borderRadius: 0,\n      margin: 0,\n    },\n    history_title__frontend: {\n      backgroundColor: primaryColor,\n    },\n    history_title__backend: {\n      backgroundColor: secondaryColor,\n    },\n    history_title__build: {\n      backgroundColor: trinaryColor,\n    },\n\n    sampleWorks: {\n      marginBottom: marginBottom,\n    },\n    sampleWork: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    sampleWork_image: {\n      maxWidth: \"100%\",\n      maxHeight: 200,\n    },\n    carousel_image: {\n      display: \"block\",\n      margin: `0 auto ${marginBottom}px auto`,\n      maxHeight: \"80vh\",\n      maxWidth: \"100%\",\n    },\n  }),\n);\n","import React, { FC } from \"react\";\nimport Experiences from \"./Experiences\";\nimport useStyles from \"./styles\";\nimport { Provider } from \"./StylesProvider\";\n\nconst Index: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Provider value={classes}>\n      <Experiences />\n    </Provider>\n  );\n};\n\nexport default Index;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nexport default makeStyles<Theme>(\n  ({\n    spacing,\n    marginBottom,\n    primaryColor,\n    breakpoints: {\n      values: { sm },\n    },\n  }) => {\n    return {\n      header: {\n        cursor: \"pointer\",\n        justifyContent: \"center\",\n        marginTop: spacing(6),\n        marginBottom: marginBottom,\n      },\n      header__navbar: {\n        margin: 0,\n        width: \"auto\",\n        \"& $header_name\": {\n          fontSize: 24,\n          \"&:first-child\": {\n            marginRight: 3,\n          },\n          \"&:last-child\": {\n            marginLeft: 3,\n          },\n        },\n      },\n\n      header_name: {\n        fontSize: 36,\n        \"&:first-child\": {\n          marginRight: 5,\n        },\n        \"&:last-child\": {\n          marginLeft: 5,\n        },\n      },\n      header_name__last: {\n        color: primaryColor,\n      },\n      header_name__small: {\n        fontSize: \"80%\",\n      },\n\n      [`@media (max-width: ${sm}px)`]: {\n        header__navbar: {\n          \"& $header_name:first-child\": {\n            margin: 0,\n          },\n          \"& $header_name:last-child\": {\n            margin: 0,\n          },\n          \"& $header_name__small\": {\n            display: \"none\",\n          },\n        },\n      },\n    };\n  },\n);\n","import { Grid } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { FC, useCallback } from \"react\";\nimport { siteUrl } from \"src/constants/config\";\nimport useStyles from \"./styles\";\n\ntype Props = {\n  classes?: { root?: string };\n  variant?: \"header\" | \"navbar\";\n};\n\nconst Header: FC<Props> = (props) => {\n  const { variant = \"header\" } = props;\n\n  const handleGridClick = useCallback(() => {\n    window.open(siteUrl);\n  }, []);\n\n  const classes = useStyles();\n\n  return (\n    <Grid\n      onClick={handleGridClick}\n      container\n      className={clsx(\n        props.classes?.root,\n        classes.header,\n        variant === \"navbar\" && classes.header__navbar,\n      )}\n    >\n      <div className={classes.header_name}>\n        K<span className={classes.header_name__small}>EVIN</span>\n      </div>\n      <div className={clsx(classes.header_name, classes.header_name__last)}>\n        S<span className={classes.header_name__small}>UEN</span>\n      </div>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\n\nexport default makeStyles<Theme>(\n  ({\n    palette: {\n      common: { black, white },\n      text: { primary },\n    },\n  }) => ({\n    contact: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      padding: 3,\n      margin: \"0px 2px\",\n      borderRadius: 4,\n      transition: \"background .3s ease\",\n      \"& $contact_link\": {\n        color: primary,\n        transition: \"color .3s ease\",\n      },\n      \"&:hover\": {\n        color: white,\n        background: black,\n        \"& $contact_link\": {\n          color: white,\n        },\n      },\n    },\n    contact_link: {},\n  }),\n);\n","import { ButtonBase, Link as MaterialUILink } from \"@material-ui/core\";\nimport { Email, GitHub, LinkedIn, Phone } from \"@material-ui/icons\";\nimport React, { FC, ReactNode } from \"react\";\nimport useStyles from \"./styles\";\n\ntype ContactsType = {\n  icon: ReactNode;\n  title: string;\n  href: string;\n};\n\nconst contacts: ContactsType[] = [\n  { icon: <Email />, title: \"\", href: \"mailto:ksrbkevinsuen@gmail.com\" },\n  { icon: <Phone />, title: \"\", href: \"tel:+908-240-5093\" },\n  { icon: <GitHub />, title: \"\", href: \"//github.com/ksrb\" },\n  { icon: <LinkedIn />, title: \"\", href: \"//linkedin.com/in/ksrbkevinsuen\" },\n];\n\nconst Contacts: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      {contacts.map(({ icon, href, title }, index) => (\n        <ButtonBase key={index} className={classes.contact}>\n          <MaterialUILink\n            href={href}\n            key={index}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className={classes.contact_link}\n          >\n            {icon}\n          </MaterialUILink>\n        </ButtonBase>\n      ))}\n    </>\n  );\n};\n\nexport default Contacts;\n","import { Container, Grid } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { FC, useCallback } from \"react\";\nimport Contacts from \"src/components/Contacts\";\nimport Header from \"src/components/Header\";\nimport Link from \"src/components/Link\";\nimport {\n  useScrollElementTracker,\n  useScrollElementTrackerRefCallback,\n} from \"src/components/ScrollElementTracker\";\nimport {\n  aboutListenerId,\n  Anchors,\n  experiencesListenerId,\n  navbarListenerId,\n  skillsListenerId,\n} from \"src/constants\";\nimport useStyles from \"./styles\";\n\nconst Navbar: FC = () => {\n  const scrollElementTrackerRef = useScrollElementTrackerRefCallback(\n    navbarListenerId,\n  );\n\n  const {\n    [aboutListenerId]: aboutListener,\n    [navbarListenerId]: navbarListener,\n    [experiencesListenerId]: experiencesListener,\n    [skillsListenerId]: skillsListener,\n  } = useScrollElementTracker();\n\n  const classes = useStyles();\n\n  const Items = useCallback(\n    () => (\n      <>\n        <div className={classes.item}>\n          <Link\n            href={`#${Anchors.About}`}\n            target=\"_self\"\n            active={aboutListener.inViewPort}\n          >\n            ABOUT\n          </Link>\n        </div>\n        <div className={classes.item}>\n          <Link\n            href={`#${Anchors.Skills}`}\n            target=\"_self\"\n            active={skillsListener.inViewPort}\n          >\n            SKILLS\n          </Link>\n        </div>\n        <div className={classes.item}>\n          <Link\n            href={`#${Anchors.Experience}`}\n            target=\"_self\"\n            active={experiencesListener.inViewPort}\n          >\n            EXPERIENCE\n          </Link>\n        </div>\n      </>\n    ),\n    [\n      aboutListener.inViewPort,\n      classes.item,\n      experiencesListener.inViewPort,\n      skillsListener.inViewPort,\n    ],\n  );\n\n  return (\n    <>\n      <Grid\n        item\n        xs={12}\n        className={clsx(classes.content, classes.content__inViewPort)}\n      >\n        <Items />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        className={clsx(classes.content, classes.content__inViewPort)}\n        ref={scrollElementTrackerRef}\n      >\n        <Contacts />\n      </Grid>\n\n      {/* Fixed navbar */}\n      <Container\n        maxWidth=\"md\"\n        className={clsx(\n          classes.content,\n          classes.content__fixed,\n          !navbarListener.inViewPort && classes.content__fixedExpanded,\n        )}\n      >\n        <div className={classes.contentFixed_left}>\n          <Header\n            classes={{\n              root: clsx(\n                classes.header,\n                !navbarListener.inViewPort && classes.header__expanded,\n              ),\n            }}\n            variant=\"navbar\"\n          />\n          <Items />\n        </div>\n        <div className={classes.contentFixed_right}>\n          <Contacts />\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default Navbar;\n","export interface PossibleTypesResultData {\n  possibleTypes: {\n    [key: string]: string[];\n  };\n}\nconst result: PossibleTypesResultData = {\n  possibleTypes: {\n    Node: [\n      \"Company\",\n      \"Use\",\n      \"Language\",\n      \"Tool\",\n      \"History\",\n      \"Experience\",\n      \"SampleWork\",\n      \"Skill\",\n    ],\n    Displayed: [\"Use\", \"Language\", \"Tool\"],\n    DisplayedNode: [\"Tool\", \"Language\", \"Use\"],\n  },\n};\nexport default result;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { loader } from \"graphql.macro\";\nimport {\n  ExperienceFieldsFragmentDoc,\n  Resolvers,\n  SkillFieldsFragmentDoc,\n  WriteQueryDocument,\n} from \"./__generated__\";\nimport introspectionResults from \"./__generated__/introspection-results\";\nimport typenames from \"./typenames\";\nimport { experiences, skills } from \"./data\";\n\nconst resolvers: { Query: Pick<Resolvers[\"Query\"], \"experience\" | \"skill\"> } = {\n  Query: {\n    experience(_, { id }, { cache, getCacheKey }) {\n      return cache.readFragment({\n        id: getCacheKey({ __typename: typenames.Experience, id }),\n        fragment: ExperienceFieldsFragmentDoc,\n        // TODO: potentially fragile as the order of the fragment definitions\n        // can be changed easily\n        // @ts-ignore\n        fragmentName: ExperienceFieldsFragmentDoc.definitions[0].name.value,\n      });\n    },\n    skill(_, { id }, { cache, getCacheKey }) {\n      return cache.readFragment({\n        id: getCacheKey({ __typename: typenames.Skill, id }),\n        fragment: SkillFieldsFragmentDoc,\n        // @ts-ignore\n        fragmentName: SkillFieldsFragmentDoc.definitions[0].name.value,\n      });\n    },\n  },\n};\n\nexport const cache = new InMemoryCache({\n  possibleTypes: introspectionResults.possibleTypes,\n});\n\nconst client = new ApolloClient({\n  cache,\n  // @ts-ignore generated resolver type valid but does not match apollo-client\n  // resolver type\n  resolvers,\n  typeDefs: loader(\"./schema.graphql\"),\n});\n\ncache.writeQuery({\n  query: WriteQueryDocument,\n  data: {\n    experiences,\n    skills,\n  },\n});\n\nexport default client;\n","import {\n  Build,\n  Code,\n  Storage,\n  SvgIconComponent,\n  Web,\n} from \"@material-ui/icons\";\nimport gsap from \"gsap\";\nimport { cache } from \"src/graphql\";\nimport uses from \"src/graphql/data/uses\";\nimport typenames from \"src/graphql/typenames\";\nimport theme from \"src/theme\";\n\ntype TweenVars = gsap.TweenVars;\n\nexport const meterSkillTweenVars: TweenVars = {\n  height: 0,\n  paddingBottom: 0,\n  duration: 0.3,\n  ease: \"power1\",\n};\nexport const meterNodeTweenVars: TweenVars = {\n  height: 0,\n  width: 0,\n  duration: 0.3,\n  ease: \"power1\",\n};\nexport const meterEdgeTweenVars = {\n  flexBasis: 0,\n  duration: 0.1,\n  ease: \"power1\",\n};\nexport const autoCompleteTweenVars = {\n  flexBasis: 0,\n  duration: 0.5,\n  ease: \"power1\",\n  overflow: \"hidden\",\n};\ntype ToggleType = {\n  logo: SvgIconComponent;\n  title: string;\n  value: any;\n  className: string;\n  color: string;\n};\n\nexport const usesFrontendIdentity = cache.identify(uses.Frontend)!;\nexport const usesBackendIdentity = cache.identify(uses.Backend)!;\nexport const usesBuildIdentity = cache.identify(uses.Build)!;\n\nconst { primaryColor, trinaryColor, secondaryColor, languagesColor } = theme;\n\nexport const toggleMap: { [key: string]: ToggleType } = {\n  [typenames.Language]: {\n    logo: Code,\n    title: \"Languages\",\n    value: typenames.Language,\n    className: \"meterRootContent__languages\",\n    color: languagesColor,\n  },\n  [usesFrontendIdentity]: {\n    logo: Web,\n    title: \"Frontend\",\n    value: usesFrontendIdentity,\n    className: \"meterRootContent__frontend\",\n    color: primaryColor,\n  },\n  [usesBackendIdentity]: {\n    logo: Storage,\n    title: \"Backend\",\n    value: usesBackendIdentity,\n    className: \"meterRootContent__backend\",\n    color: secondaryColor,\n  },\n  [usesBuildIdentity]: {\n    logo: Build,\n    title: \"Build\",\n    value: usesBuildIdentity,\n    className: \"meterRootContent__build\",\n    color: trinaryColor,\n  },\n};\n\nexport const toggleMapValues = Object.values(toggleMap);\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\nimport { toggleMapValues } from \"./constants\";\n\nexport const stroke = 3;\n\nexport const skill_titleFontSize = 12;\nexport const skill_titleLineHeight = 1.4;\nexport const skill_titleHeight = skill_titleFontSize * skill_titleLineHeight;\n\nexport const meter_rootPadding = 3;\nexport const meter_rootIconSize = 32;\nexport const meter_rootSize =\n  meter_rootIconSize + meter_rootPadding * 2 + stroke * 2;\nexport const meter_rootExpanded = {\n  height: meter_rootSize,\n  width: meter_rootSize,\n};\n\nexport const meter_nodeSize = 16;\nexport const meter_nodeExpanded = {\n  height: meter_nodeSize,\n  width: meter_nodeSize,\n};\n\nexport const meter_edgeSize = 50;\nexport const meter_edgeExpanded = {\n  flexBasis: meter_edgeSize,\n};\n\nexport default makeStyles<Theme>(\n  ({\n    palette: {\n      primary,\n      common: { white },\n    },\n  }) => {\n    return toggleMapValues.reduce<{\n      [key: string]: any;\n    }>(\n      (aggregator, { color, className }) => {\n        aggregator[className] = {\n          borderColor: color,\n        };\n        aggregator.skills[`& $${className}`] = {\n          borderColor: color,\n          color,\n        };\n        aggregator.skills[\"& $meterRootContent__selected\"][`&$${className}`] = {\n          background: color,\n        };\n\n        return aggregator;\n      },\n      {\n        root: {},\n\n        skills: {\n          \"& $meter_edge\": {\n            flexBasis: meter_edgeSize - meter_rootSize / 2,\n          },\n\n          \"& $meterRootContent__selected\": {\n            background: primary.main,\n          },\n\n          \"& $skill_title__selected\": {\n            color: white,\n          },\n\n          \"& $skill:last-child $meter_edgeVertical\": {\n            display: \"none\",\n          },\n        },\n        skill: {},\n        skill_title__selected: {},\n\n        meterRootContent__selected: {},\n        meter_edge: {},\n        meter_edgeVertical: {},\n\n        autoComplete: {\n          flexBasis:\n            meter_rootSize * 4 +\n            meter_rootSize / 2 +\n            (meter_edgeSize - meter_rootSize / 2) *\n              (toggleMapValues.length - 1),\n          overflow: \"visible\",\n          // TODO (ksuen): figure out why border-radius is overridden in production\n          \"& $autoComplete_inputRoot\": {\n            borderRadius: \"28px / 50%\",\n          },\n        },\n        autoComplete_inputRoot: {},\n\n        filters: {\n          height: 0,\n          width: 0,\n        },\n      },\n    );\n  },\n);\n","import { makeStyles } from \"@material-ui/styles\";\nimport {\n  meter_nodeSize,\n  meter_rootExpanded,\n  meter_rootIconSize,\n  meter_rootPadding,\n  meter_rootSize,\n  stroke,\n} from \"src/components/Skills/styles\";\nimport { Theme } from \"src/theme\";\n\nexport default makeStyles<Theme>(\n  ({\n    palette: {\n      primary,\n      common: { white },\n    },\n    primaryColor,\n    secondaryColor,\n    trinaryColor,\n    languagesColor,\n  }) => ({\n    meter: {\n      // Styles for <Skills> component\n      position: \"relative\",\n\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n\n    // Styles for <Skills> component\n    meter_smallRoot: {\n      marginLeft: meter_rootSize / 2 - meter_nodeSize / 2 + 1,\n    },\n\n    meter_root: {\n      ...meter_rootExpanded,\n      position: \"relative\",\n    },\n\n    meter_rootContent: {\n      ...meter_rootExpanded,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexShrink: 0,\n\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n\n      borderRadius: \"50%\",\n      border: `${stroke}px solid ${primary.main}`,\n      padding: meter_rootPadding,\n      overflow: \"hidden\",\n\n      boxSizing: \"border-box\",\n\n      background: white,\n    },\n\n    meter_rootIcon: {\n      position: \"absolute\",\n      width: meter_rootIconSize,\n    },\n    meter_rootIconFader: {\n      transition: \".5s ease opacity\",\n    },\n\n    [primaryColor.substring(1)]: {\n      filter: `url(${primaryColor})`,\n    },\n    [secondaryColor.substring(1)]: {\n      filter: `url(${secondaryColor})`,\n    },\n    [trinaryColor.substring(1)]: {\n      filter: `url(${trinaryColor})`,\n    },\n    [languagesColor.substring(1)]: {\n      filter: `url(${languagesColor})`,\n    },\n  }),\n);\n","import { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport {\n  meter_edgeExpanded,\n  meter_nodeExpanded,\n  meter_rootSize,\n  skill_titleFontSize,\n  skill_titleHeight,\n  skill_titleLineHeight,\n  stroke,\n} from \"src/components/Skills/styles\";\nimport { Theme } from \"src/theme\";\n\nexport default makeStyles<Theme>(\n  ({\n    spacing,\n    shape,\n    typography,\n    palette: {\n      grey,\n      primary,\n      common: { white },\n    },\n  }) => ({\n    skill: {\n      position: \"relative\",\n      paddingBottom: skill_titleHeight + spacing(1),\n      \"&:hover $meter_nodeToolTip\": {\n        maxWidth: 300,\n        opacity: 1,\n      },\n      \"&:hover $meter_rootIconFader\": {\n        opacity: 0,\n      },\n    },\n    skill_title: {\n      position: \"absolute\",\n      padding: \"0 3px\",\n\n      height: skill_titleHeight,\n      minWidth: meter_rootSize,\n\n      fontSize: skill_titleFontSize,\n      lineHeight: skill_titleLineHeight,\n      textAlign: \"center\",\n\n      overflow: \"hidden\",\n      background: white,\n      transition: \"400ms height ease\",\n    },\n    skill_title__meterRoot: {\n      top: \"100%\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n    },\n\n    meter_edgeVertical: {\n      position: \"absolute\",\n      top: 0,\n      left: meter_rootSize / 2,\n      height: \"100%\",\n      width: stroke,\n      backgroundColor: primary.main,\n    },\n\n    meter_edgeVertical__lastChild: {\n      height: `calc(50% - ${skill_titleHeight / 2}px)`,\n    },\n\n    meter_rootIconFader: {},\n\n    meter_edge: {\n      ...meter_edgeExpanded,\n      height: stroke,\n      backgroundColor: primary.main,\n    },\n\n    meter_node: {\n      ...meter_nodeExpanded,\n      position: \"relative\",\n      flexShrink: 0,\n      borderRadius: \"50%\",\n      backgroundColor: primary.main,\n    },\n\n    meter_nodeToolTip: {\n      maxWidth: 0,\n      opacity: 0,\n      overflow: \"hidden\",\n      position: \"absolute\",\n      left: `calc(100% + ${spacing(1)}px)`,\n      top: \"50%\",\n      transform: \"translateY(-50%)\",\n      transition: \"max-width .1s ease-in, opacity .1s ease-in\",\n\n      // Style copied from:\n      // https://github.com/mui-org/material-ui/blob/v4.11.3/packages/material-ui/src/Tooltip/Tooltip.js#L82-L93\n      whiteSpace: \"nowrap\",\n      backgroundColor: fade(grey[700], 0.9),\n      borderRadius: shape.borderRadius,\n      color: white,\n      fontFamily: typography.fontFamily,\n      padding: \"4px 8px\",\n      fontSize: typography.pxToRem(10),\n      lineHeight: \"1.4em\",\n      wordWrap: \"break-word\",\n      fontWeight: typography.fontWeightMedium,\n    },\n\n    // Styles for <Skills> component\n    meter_nodeWrapper: {\n      ...meter_nodeExpanded,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n\n    meter_text: {\n      display: \"flex\",\n      alignItems: \"center\",\n      boxSizing: \"border-box\",\n      textAlign: \"center\",\n      padding: spacing(0, 1),\n      border: `${stroke}px solid ${primary.main}`,\n      borderRadius: `${meter_rootSize / 2}px / 50%`,\n      height: meter_rootSize,\n    },\n  }),\n);\n","import { createSvgIcon } from \"@material-ui/core\";\n\nexport default createSvgIcon(\n  <>\n    <path\n      d=\"M15,14.8c0.1,0,0.2,0.1,0.3,0.1l5.3,7c0.1,0.1,0.1,0.1,0.1,0.2c0,0,0,0.1-0.1,0.2l-0.8,0.6c0,0-0.1,0-0.2,0\n\t\tc0,0-0.1,0-0.2-0.1l-4.7-7.6c-0.1-0.2-0.1-0.4,0.1-0.5C14.9,14.8,15,14.8,15,14.8 M15,13.8c-0.3,0-0.5,0.1-0.8,0.2l0,0\n\t\tc-0.6,0.4-0.8,1.2-0.4,1.9l4.8,7.4c0.2,0.4,0.6,0.6,1.1,0.6c0.2,0,0.5-0.1,0.7-0.2l0.8-0.6c0.6-0.4,0.7-1.2,0.3-1.9l-5.4-7\n\t\tC15.8,14,15.3,13.8,15,13.8L15,13.8z\"\n    />\n    <path\n      d=\"M9.6,1.1c2.2,0,4,1,5.3,2.8c2,2.8,1.3,7-1.6,8.8c-1.1,0.7-2.3,1.1-3.7,1.1c-2.2,0-4-1-5.3-2.8C2.3,8.2,3,4.2,6,2.2\n\t\tC7,1.4,8.3,1.1,9.6,1.1 M9.6,0C8.1,0,6.7,0.4,5.4,1.4C2,3.7,1.2,8.3,3.5,11.6c1.4,2,3.7,3.1,6.1,3.1c1.4,0,2.9-0.4,4.2-1.3\n\t\tc3.4-2.3,4.2-6.9,1.9-10.3C14.2,1.1,11.9,0,9.6,0L9.6,0z\"\n    />\n    <path\n      d=\"M7.3,4.1c1.5-1,3.4-1.1,4.3-0.2c0-0.1-0.1-0.2-0.2-0.3\n\tc-0.8-1.1-2.8-1.1-4.5,0S4.5,6.6,5.4,7.7C5.4,7.8,5.4,8,5.6,8C5.1,6.8,5.7,5.1,7.3,4.1z\"\n    />\n  </>,\n  \"Search\",\n);\n","import React, { createContext, useContext } from \"react\";\nimport useStylesMeterRoot from \"./MeterRoot/styles\";\nimport useStylesSkill from \"./Skill/styles\";\nimport useStylesSkills from \"./styles\";\n\ntype StylesContextProperties = {\n  classesMeterRoot: ReturnType<typeof useStylesMeterRoot>;\n  classesSkill: ReturnType<typeof useStylesSkill>;\n  classesSkills: ReturnType<typeof useStylesSkills>;\n};\n\nconst context = createContext<StylesContextProperties>({\n  classesMeterRoot: {},\n  classesSkill: {},\n  classesSkills: {},\n});\n\nexport const { Provider } = context;\n\nexport function useStylesShared() {\n  return useContext(context);\n}\n","import { ButtonBase, ButtonBaseProps } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { FC, ReactNode } from \"react\";\nimport Link from \"src/components/Link\";\nimport { useStylesShared } from \"src/components/Skills/StylesProvider\";\n\ntype Props = {\n  color?: string;\n  logo?: ReactNode;\n  title?: string;\n  url?: string;\n  classes?: { meter_rootContent?: string };\n} & Pick<ButtonBaseProps, \"onClick\">;\n\nconst MeterRoot: FC<Props> = ({\n  children,\n  classes,\n  color,\n  logo,\n  onClick,\n  title,\n  url,\n}) => {\n  const { classesMeterRoot, classesSkill } = useStylesShared();\n\n  return (\n    <div className={classesMeterRoot.meter}>\n      <Link\n        href={url}\n        className={classesMeterRoot.meter_root}\n        rel=\"noreferrer\"\n        target=\"_blank\"\n      >\n        <ButtonBase\n          onClick={onClick}\n          className={clsx(\n            classesMeterRoot.meter_rootContent,\n            classes?.meter_rootContent,\n          )}\n          style={{ borderColor: color }}\n        >\n          {typeof logo !== \"string\" && logo}\n          {typeof logo === \"string\" && (\n            <>\n              <img\n                className={classesMeterRoot.meter_rootIcon}\n                src={logo}\n                alt={title}\n              />\n              {color && (\n                <img\n                  className={clsx(\n                    classesSkill.meter_rootIconFader,\n                    classesMeterRoot.meter_rootIcon,\n                    classesMeterRoot.meter_rootIconFader,\n                    classesMeterRoot[color.substring(1)],\n                  )}\n                  src={logo}\n                  alt={title}\n                />\n              )}\n            </>\n          )}\n        </ButtonBase>\n      </Link>\n      {children}\n    </div>\n  );\n};\n\nexport default MeterRoot;\n","import clsx from \"clsx\";\nimport gsap from \"gsap\";\nimport React, { FC, Fragment, ReactNode, useCallback, useMemo } from \"react\";\nimport MeterRoot from \"src/components/Skills/MeterRoot\";\nimport { useStylesShared } from \"src/components/Skills/StylesProvider\";\nimport { useColorByType } from \"src/components/utility\";\nimport { Language, SkillsGetQuery, Tool } from \"src/graphql/__generated__\";\nimport typenames from \"src/graphql/typenames\";\nimport { ExtractArrayType } from \"src/types\";\n\nfunction printDateString(\n  valueParam: number,\n  type: \"year\" | \"month\" | \"day\",\n): string {\n  const value = (() => {\n    switch (type) {\n      case \"day\":\n        return Math.floor(valueParam % 30);\n      case \"month\":\n        return Math.floor((valueParam % 365) / 30);\n      case \"year\":\n        return Math.floor(valueParam / 365);\n      default:\n        return 0;\n    }\n  })();\n\n  if (value === 0) {\n    return \"\";\n  }\n\n  if (value === 1) {\n    return `${value} ${type}`;\n  }\n\n  return `${value} ${type}s`;\n}\n\nfunction getLogo({\n  values,\n}: ExtractArrayType<SkillsGetQuery[\"skills\"]>): string {\n  const languages = values as Language[];\n  const isOnlyLanguages = !languages.some(\n    ({ __typename }) => __typename !== typenames.Language,\n  );\n\n  if (isOnlyLanguages) {\n    return languages[0].logo;\n  }\n\n  const tools = values as Tool[];\n  const isOnlyTools = !tools.some(\n    ({ __typename }) => __typename !== typenames.Tool,\n  );\n\n  if (isOnlyTools) {\n    return tools[0].logo;\n  }\n\n  return \"\";\n}\n\nexport type SkillType = ExtractArrayType<SkillsGetQuery[\"skills\"]>;\n\nexport const Skill: FC<{ skill: SkillType }> = ({ skill }) => {\n  const { title, utilization, value } = skill;\n  const url = useMemo(() => {\n    // Value type is Language or Tool\n    if (\n      value.__typename === typenames.Language ||\n      value.__typename === typenames.Tool\n    ) {\n      return value.url;\n    }\n  }, [value]);\n\n  const timeline = useMemo(() => gsap.timeline(), []);\n  const { classesMeterRoot, classesSkill, classesSkills } = useStylesShared();\n\n  const skillRef = useCallback(\n    (element: HTMLDivElement) => {\n      if (!element) {\n        return;\n      }\n      const meterRootContentElement = element.querySelector(\n        `.${classesMeterRoot.meter_rootContent}`,\n      );\n      const meterEdgeVerticalElements = element.querySelectorAll(\n        `.${classesSkill.meter_edgeVertical}`,\n      );\n      const meterEdgeElements = element.querySelectorAll(\n        `.${classesSkill.meter_edge}`,\n      );\n      const meterNodeElements = element.querySelectorAll(\n        `.${classesSkill.meter_node}`,\n      );\n      const skillTitleElement = element.querySelector(\n        `.${classesSkill.skill_title}`,\n      );\n\n      timeline.from(meterEdgeVerticalElements, {\n        duration: 0.5,\n        ease: \"power1\",\n        height: 0,\n      });\n      timeline.from(meterRootContentElement, {\n        duration: 0.5,\n        ease: \"power1\",\n        height: 0,\n        width: 0,\n        padding: 0,\n        borderWidth: 0,\n      });\n\n      for (let i = 0; i < meterEdgeElements.length; i++) {\n        const meterEdgeElement = meterEdgeElements[i];\n        timeline.from(meterEdgeElement, {\n          duration: 0.1,\n          ease: \"power1\",\n          flexBasis: 0,\n        });\n\n        const meterNodeElement = meterNodeElements[i];\n        timeline.from(meterNodeElement, {\n          duration: 0.1,\n          ease: \"power1\",\n          height: 0,\n          width: 0,\n        });\n      }\n\n      timeline.from(\n        skillTitleElement,\n        {\n          duration: 0.1,\n          ease: \"power1\",\n          height: 0,\n        },\n        1.3,\n      );\n    },\n    [\n      classesSkill.meter_edgeVertical,\n      classesMeterRoot.meter_rootContent,\n      classesSkill.meter_edge,\n      classesSkill.meter_node,\n      classesSkill.skill_title,\n      timeline,\n    ],\n  );\n\n  const nodeCount = useMemo(() => Math.round(Math.log(utilization)), [\n    utilization,\n  ]);\n  const color = useColorByType(value);\n  const nodes: ReactNode[] = [];\n  const tooltipTitle = useMemo(\n    () =>\n      `${printDateString(utilization, \"year\")} ${printDateString(\n        utilization,\n        \"month\",\n      )} ${printDateString(utilization, \"day\")}`,\n    [utilization],\n  );\n\n  for (let i = 0; i < nodeCount; i++) {\n    const lastNode = i === nodeCount - 1;\n    nodes.push(\n      <Fragment key={i}>\n        <div\n          className={classesSkill.meter_edge}\n          style={{ backgroundColor: color }}\n        />\n        {lastNode ? (\n          <div\n            className={classesSkill.meter_node}\n            style={{ backgroundColor: color }}\n          >\n            <div className={classesSkill.meter_nodeToolTip}>{tooltipTitle}</div>\n          </div>\n        ) : (\n          <div\n            className={classesSkill.meter_node}\n            style={{ backgroundColor: color }}\n          />\n        )}\n      </Fragment>,\n    );\n  }\n\n  const logo = getLogo(skill);\n\n  return (\n    <div\n      className={clsx(classesSkill.skill, classesSkills.skill)}\n      ref={skillRef}\n    >\n      <div\n        className={clsx(\n          classesSkill.meter_edgeVertical,\n          classesSkills.meter_edgeVertical,\n        )}\n        style={{ backgroundColor: color }}\n      />\n      <MeterRoot url={url} color={color} logo={logo} title={title}>\n        {nodes}\n      </MeterRoot>\n      <div className={classesSkill.skill_title}>{title}</div>\n    </div>\n  );\n};\n\nexport default Skill;\n","import { Grid, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport clsx from \"clsx\";\nimport gsap from \"gsap\";\nimport React, {\n  createElement,\n  FC,\n  Fragment,\n  useCallback,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useScrollElementTrackerRefCallback } from \"src/components/ScrollElementTracker\";\nimport { skillsListenerId } from \"src/constants\";\nimport { cache } from \"src/graphql\";\nimport { useSkillsGetQuery } from \"src/graphql/__generated__\";\nimport typenames from \"src/graphql/typenames\";\nimport Search from \"src/icons/Search\";\nimport theme from \"src/theme\";\nimport {\n  autoCompleteTweenVars,\n  meterEdgeTweenVars,\n  meterNodeTweenVars,\n  meterSkillTweenVars,\n  toggleMapValues,\n  usesBackendIdentity,\n  usesBuildIdentity,\n  usesFrontendIdentity,\n} from \"./constants\";\nimport MeterRoot from \"./MeterRoot\";\nimport Skill, { SkillType } from \"./Skill\";\nimport { useStylesShared } from \"./StylesProvider\";\n\nconst Filter: FC<{ color: string }> = ({ color }) => (\n  <filter id={color.substring(1)}>\n    <feColorMatrix\n      in=\"SourceGraphic\"\n      type=\"matrix\"\n      values=\".33 .33 .33 0 0\n              .33 .33 .33 0 0\n              .33 .33 .33 0 0\n               0   0   0  1 0\"\n      result=\"desaturate\"\n    />\n    <feFlood floodColor={color} result=\"flood\" />\n    <feComposite\n      in=\"desaturate\"\n      in2=\"flood\"\n      operator=\"arithmetic\"\n      k1=\"1\"\n      k2=\"0\"\n      k3=\"0\"\n      k4=\"0\"\n    />\n  </filter>\n);\n\nconst { primaryColor, trinaryColor, secondaryColor, languagesColor } = theme;\n\nconst Skills: FC = () => {\n  const { data } = useSkillsGetQuery();\n  const skills = useMemo(() => data?.skills ?? [], [data]);\n\n  const [selectedSkill, setSelectedSkill] = useState<SkillType | undefined>(\n    undefined,\n  );\n\n  const handleAutoCompleteChange = useCallback(\n    (event, data) => setSelectedSkill(data),\n    [],\n  );\n\n  const [toggles, setToggles] = useState<{ [key: string]: boolean }>({\n    [typenames.Language]: true,\n    [usesFrontendIdentity]: true,\n    [usesBackendIdentity]: true,\n    [usesBuildIdentity]: true,\n  });\n\n  const handleToggleButtonGroupOnChange = useCallback(\n    (value: string) => () => {\n      setToggles({ ...toggles, [value]: !toggles[value] });\n    },\n    [toggles],\n  );\n\n  const skillsFiltered = useMemo(\n    () =>\n      skills\n        .filter((skill) => {\n          if (!selectedSkill) {\n            return true;\n          }\n\n          return skill.id === selectedSkill.id;\n        })\n        .filter(({ value }) => {\n          if (value.__typename === typenames.Tool) {\n            const identity = cache.identify(value.use)!;\n            return toggles[identity];\n          }\n\n          return toggles[value.__typename as string];\n        }),\n    [selectedSkill, skills, toggles],\n  );\n\n  const { classesSkills, classesSkill, classesMeterRoot } = useStylesShared();\n\n  const [showSearch, setShowSearch] = useState(false);\n  const timeline = useMemo(\n    () => gsap.timeline({ paused: true, yoyo: true }),\n    [],\n  );\n\n  const searchRef = useCallback(\n    (element: HTMLDivElement) => {\n      if (!element) {\n        return;\n      }\n      const meterSkillElement = element;\n      const meterNodeElement = element.querySelector(\n        `.${classesSkill.meter_node}`,\n      );\n      const meterEdgeElement = element.querySelector(\n        `.${classesSkill.meter_edge}`,\n      );\n      const autoComplete = element.querySelector(\n        `.${classesSkills.autoComplete}`,\n      );\n\n      timeline.from(meterSkillElement, meterSkillTweenVars);\n      timeline.from(meterNodeElement, meterNodeTweenVars);\n      timeline.from(meterEdgeElement, meterEdgeTweenVars);\n      timeline.from(autoComplete, autoCompleteTweenVars);\n    },\n    [\n      classesSkill.meter_edge,\n      classesSkill.meter_node,\n      classesSkills.autoComplete,\n      timeline,\n    ],\n  );\n\n  const handleShowSearch = useCallback(() => {\n    if (!showSearch) {\n      setShowSearch(true);\n      timeline.play();\n      return;\n    }\n\n    setShowSearch(false);\n    timeline.reverse();\n    setSelectedSkill(undefined);\n  }, [showSearch, timeline]);\n\n  const scrollElementTrackerRef = useScrollElementTrackerRefCallback(\n    skillsListenerId,\n  );\n\n  return (\n    <>\n      <Grid\n        container\n        className={classesSkills.root}\n        ref={scrollElementTrackerRef}\n      >\n        <Grid item xs={12}>\n          <div className={classesSkills.skills}>\n            <div className={classesSkill.skill}>\n              <div className={classesSkill.meter_edgeVertical} />\n              <MeterRoot\n                onClick={handleShowSearch}\n                title=\"Search\"\n                classes={{\n                  meter_rootContent: clsx(\n                    showSearch && classesSkills.meterRootContent__selected,\n                  ),\n                }}\n                logo={\n                  <Search\n                    color=\"primary\"\n                    className={clsx(\n                      showSearch && classesSkills.skill_title__selected,\n                    )}\n                  />\n                }\n              >\n                {toggleMapValues.map(({ logo, title, value, className }) => {\n                  const selected = toggles[value];\n\n                  return (\n                    <Fragment key={value}>\n                      <div\n                        className={clsx(\n                          classesSkill.meter_edge,\n                          classesSkills.meter_edge,\n                        )}\n                      />\n                      <MeterRoot\n                        classes={{\n                          meter_rootContent: clsx(\n                            classesSkills[className],\n                            selected &&\n                              classesSkills.meterRootContent__selected,\n                          ),\n                        }}\n                        onClick={handleToggleButtonGroupOnChange(value)}\n                        logo={createElement(logo, {\n                          className: clsx(\n                            selected && classesSkills.skill_title__selected,\n                          ),\n                        })}\n                        title={title}\n                      >\n                        <div\n                          className={clsx(\n                            classesSkill.skill_title,\n                            classesSkill.skill_title__meterRoot,\n                          )}\n                        >\n                          {title}\n                        </div>\n                      </MeterRoot>\n                    </Fragment>\n                  );\n                })}\n              </MeterRoot>\n              <div className={classesSkill.skill_title}>Search</div>\n            </div>\n\n            <div\n              className={clsx(classesSkill.skill, classesSkills.skill)}\n              ref={searchRef}\n            >\n              <div className={classesSkill.meter_edgeVertical} />\n              <div\n                className={clsx(\n                  classesMeterRoot.meter,\n                  classesMeterRoot.meter_smallRoot,\n                )}\n              >\n                <div className={classesSkill.meter_nodeWrapper}>\n                  <div className={classesSkill.meter_node} />\n                </div>\n                <div\n                  className={clsx(\n                    classesSkill.meter_edge,\n                    classesSkills.meter_edge,\n                  )}\n                />\n                <Autocomplete\n                  classes={{ inputRoot: classesSkills.autoComplete_inputRoot }}\n                  className={classesSkills.autoComplete}\n                  options={skills}\n                  getOptionLabel={({ title }) => title}\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" />\n                  )}\n                  onChange={handleAutoCompleteChange}\n                />\n              </div>\n            </div>\n            {skillsFiltered.map((skill) => (\n              <Skill key={skill.id} skill={skill} />\n            ))}\n\n            {skillsFiltered.length === 0 && (\n              <div className={clsx(classesSkill.skill, classesSkills.skill)}>\n                <div\n                  className={clsx(\n                    classesSkill.meter_edgeVertical,\n                    classesSkill.meter_edgeVertical__lastChild,\n                  )}\n                />\n                <div\n                  className={clsx(\n                    classesMeterRoot.meter,\n                    classesMeterRoot.meter_smallRoot,\n                  )}\n                >\n                  <div className={classesSkill.meter_nodeWrapper}>\n                    <div className={classesSkill.meter_node} />\n                  </div>\n\n                  <div\n                    className={clsx(\n                      classesSkill.meter_edge,\n                      classesSkills.meter_edge,\n                    )}\n                  />\n                  <div className={classesSkill.meter_text}>No results</div>\n                </div>\n              </div>\n            )}\n          </div>\n        </Grid>\n      </Grid>\n\n      <svg className={classesSkills.filters}>\n        <Filter color={primaryColor} />\n        <Filter color={secondaryColor} />\n        <Filter color={trinaryColor} />\n        <Filter color={languagesColor} />\n      </svg>\n    </>\n  );\n};\n\nexport default Skills;\n","import React, { FC } from \"react\";\nimport useStylesMeterRoot from \"./MeterRoot/styles\";\nimport useStylesSkill from \"./Skill/styles\";\nimport Skills from \"./Skills\";\nimport useStylesSkills from \"./styles\";\nimport { Provider } from \"./StylesProvider\";\n\nconst Index: FC = () => {\n  const classesMeterRoot = useStylesMeterRoot();\n  const classesSkill = useStylesSkill();\n  const classesSkills = useStylesSkills();\n\n  return (\n    <Provider\n      value={{\n        classesMeterRoot,\n        classesSkill,\n        classesSkills,\n      }}\n    >\n      <Skills />\n    </Provider>\n  );\n};\n\nexport default Index;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { Theme } from \"src/theme\";\nimport { Anchors } from \"src/constants\";\nimport { navbarHeight } from \"src/components/Navbar/styles\";\n\nexport default makeStyles<Theme>(({ typography: { fontFamily } }) => ({\n  \"@global\": {\n    \"html, body, #root\": {\n      width: \"100%\",\n      height: \"100%\",\n    },\n    body: {\n      margin: 0,\n      fontFamily,\n      \"-webkit-font-smoothing\": \"antialiased\",\n      \"-moz-osx-font-smoothing\": \"grayscale\",\n    },\n    code: {\n      fontFamily:\n        \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\",\n    },\n    [Object.values(Anchors)\n      .map((anchor) => `#${anchor}`)\n      .join(\",\")]: {\n      scrollMarginTop: `${navbarHeight}px`,\n    },\n  },\n}));\n","import { Container } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport About from \"src/components/About\";\nimport Experiences from \"src/components/Experiences\";\nimport Header from \"src/components/Header\";\nimport Navbar from \"src/components/Navbar\";\nimport Skills from \"src/components/Skills\";\nimport { Anchors } from \"src/constants\";\n\nimport useStyles from \"./styles\";\n\nconst App: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root} maxWidth=\"md\">\n      <Header />\n      <Navbar />\n      <div id={Anchors.About}>\n        <About />\n      </div>\n      <div id={Anchors.Skills}>\n        <Skills />\n      </div>\n      <div id={Anchors.Experience}>\n        <Experiences />\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ApolloProvider } from \"@apollo/client\";\nimport { jssPreset, StylesProvider, ThemeProvider } from \"@material-ui/styles\";\nimport { create } from \"jss\";\nimport camelCase from \"jss-plugin-camel-case\";\nimport compose from \"jss-plugin-compose\";\nimport defaultUnit from \"jss-plugin-default-unit\";\nimport extend from \"jss-plugin-extend\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport ScrollElementTracker from \"./components/ScrollElementTracker\";\nimport client from \"./graphql\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport theme from \"./theme\";\n\nconst jss = create({\n  plugins: [\n    ...jssPreset().plugins,\n    extend(),\n    compose(),\n    camelCase(),\n    defaultUnit(),\n  ],\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <StylesProvider jss={jss}>\n      <ThemeProvider theme={theme}>\n        <ScrollElementTracker>\n          <App />\n        </ScrollElementTracker>\n      </ThemeProvider>\n    </StylesProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}